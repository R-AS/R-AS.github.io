{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/redux-tool-kit/redux_tool_kit_1/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"table-of-contents\">Table of Contents</h3>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#rtk-%E7%AE%80%E4%BB%8B\">RTK 简介</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%85-rtk\">安装 RTK</a></li>\n<li><a href=\"#redux-%E4%B8%8E-rtk-%E4%BE%8B%E5%AD%90%E5%AF%B9%E6%AF%94\">Redux 与 RTK 例子对比</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-createaction\">使用 createAction</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-createreducer\">使用 createReducer</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-createslice\">使用 createSlice</a></li>\n</ul>\n</div>\n<hr>\n<h3 id=\"rtk-简介\">RTK 简介</h3>\n<p>Redux ToolKit 包旨在成为编写 Redux 逻辑的标准方式。他最初是为了帮助解决 Redux 的三个常见问题而创建的:</p>\n<ul>\n<li>配置 Redux store 太复杂</li>\n<li>必须添加大量的软件包才能让 Redux 做任何有用的事情</li>\n<li>Redux 需要太多样板代码</li>\n</ul>\n<p>Redux ToolKit 工具包对所有的 Redux 用户都是有益的。 无论你是一个全新的 Redux 用户设置了你的第一个项目，还是一个有经验的用户谁想要简化一个现有的应用程序，Redux 工具包可以帮助你使你的 Redux 代码更好。</p>\n<h3 id=\"安装-rtk\">安装 RTK</h3>\n<p><strong>1. 使用 npm/yarn 安装</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"># <span class=\"token constant\">NPM</span>\nnpm install @reduxjs<span class=\"token operator\">/</span>toolkit\n\n# Yarn\nyarn add @reduxjs<span class=\"token operator\">/</span>toolkit</code></pre></div>\n<p><strong>2. 在脚本标记使用预编译的 UMD 包</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/@reduxjs/toolkit@latest/dist/redux-toolkit.umd.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<hr>\n<h3 id=\"redux-与-rtk-例子对比\">Redux 与 RTK 例子对比</h3>\n<p><strong>写一个 counter 的例子，对比 Redux 与 RTK (只挑重要部分)</strong>\n<strong>以下例子是直接在脚本标记引用编译的 UMD 包，定义一个 window.RTK 全局变量</strong></p>\n<p><strong>1. Redux</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// types</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'INCREMENT'</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DECREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'DECREMENT'</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT_IF_ODD</span> <span class=\"token operator\">=</span> <span class=\"token string\">'INCREMENT_IF_ODD'</span>\n  \n  <span class=\"token comment\">// actions</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">DECREMENT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incrementIfOdd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">INCREMENT_IF_ODD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// reducers</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">INCREMENT</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">DECREMENT</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">INCREMENT_IF_ODD</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> state\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> Redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>2. RTK</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token constant\">RTK</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">RTK</span>\n  <span class=\"token keyword\">const</span> counterSlice <span class=\"token operator\">=</span> <span class=\"token constant\">RTK</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'counter'</span><span class=\"token punctuation\">,</span>\n    initialState<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    reducers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">decrement</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> increment<span class=\"token punctuation\">,</span> decrement <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> counterSlice<span class=\"token punctuation\">.</span>actions\n\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token constant\">RTK</span><span class=\"token punctuation\">.</span><span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> reducer<span class=\"token operator\">:</span> counterSlice<span class=\"token punctuation\">.</span>reducer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3 id=\"使用-createaction\">使用 createAction</h3>\n<p><strong>createAction 接受一个操作类型字符串作为参数，并返回一个使用该类型字符串的操作创建者函数</strong></p>\n<p>因此，这两个例子是等价的:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// Original approach: write the action type and action creator by hand</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'INCREMENT'</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">incrementOriginal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">incrementOriginal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// {type: \"INCREMENT\"}</span>\n\n  <span class=\"token comment\">// Or, use `createAction` to generate the action creator:</span>\n  <span class=\"token keyword\">const</span> incrementNew <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">incrementNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// {type: \"INCREMENT\"}</span></code></pre></div>\n<p>使用 createAction 来简化前面的反例:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// types</span>\n  <span class=\"token comment\">// const INCREMENT = 'INCREMENT'</span>\n  <span class=\"token comment\">// const DECREMENT = 'DECREMENT'</span>\n  <span class=\"token comment\">// const INCREMENT_IF_ODD = 'INCREMENT_IF_ODD'</span>\n  \n  <span class=\"token comment\">// actions</span>\n  <span class=\"token comment\">// const increment = () => ({ type: INCREMENT })</span>\n  <span class=\"token comment\">// const decrement = () => ({ type: DECREMENT })</span>\n  <span class=\"token comment\">// const incrementIfOdd = () => ({ type: INCREMENT_IF_ODD })</span>\n\n  <span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> decrement <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DECREMENT'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> increment<span class=\"token punctuation\">.</span>type<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">case</span> decrement<span class=\"token punctuation\">.</span>type<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> Redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>这又为我们节省了几行代码，至少我们没有在所有地方重复 INCREMENT 这个词</strong></p>\n<hr>\n<h3 id=\"使用-createreducer\">使用 createReducer</h3>\n<p>Redux Toolkit 包含一个 createReducer 函数，该函数允许您使用“查找表”对象编写还原程序，其中对象中的每个键都是一个 Redux 操作类型的字符串，值是 reducer 函数。 我们可以使用它直接替换现有的计数器函数定义。 因为我们需要使用操作类型字符串作为键，所以我们可以使用 ES6对象“ computed property”语法从类型字符串变量创建键。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>increment<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>decrement<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3 id=\"使用-createslice\">使用 createSlice</h3>\n<p>Createslice 返回一个“slice”对象，其中包含作为名为 reducer 的字段生成的 reducer 函数，以及在名为 actions 的对象中生成的动作创建器。</p>\n<p><strong>它允许我们提供一个包含 reducer 函数的对象，并且它将根据我们列出的 reducer 函数的名称自动生成 action 类型字符串和 action creator 函数。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> counterSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'counter'</span><span class=\"token punctuation\">,</span>\n    initialState<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    reducers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">decrement</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    reducer<span class=\"token operator\">:</span> counterSlice<span class=\"token punctuation\">.</span>reducer\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>counterSlice<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>参考自</p>\n<ul>\n<li><a href=\"https://redux-toolkit.js.org/tutorials/basic-tutorial\">https://redux-toolkit.js.org/tutorials/basic-tutorial</a></li>\n</ul>","frontmatter":{"title":"Redux ToolKit 基础篇","date":"2020-03-18","type":"redux tool kit"},"excerpt":"Table of Contents RTK 简介 安装 RTK Redux 与 RTK 例子对比 使用 createAction 使用 createReducer 使用 createSliceRTK 简介 Redux ToolKit 包旨在成为编写 Redux…","fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/redux-tool-kit/redux_tool_kit_1/"}}}