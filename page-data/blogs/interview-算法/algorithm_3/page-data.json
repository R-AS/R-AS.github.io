{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/interview-算法/algorithm_3/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"/Users/zhengjinyang/Documents/study/R-AS.github.io/src/pages/blogs/interview-算法/algorithm_3.md","html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#%E5%8F%8D%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8\">反转单链表</a></li>\n<li><a href=\"#%E6%80%9D%E8%B7%AF\">思路</a></li>\n<li><a href=\"#%E5%AE%9E%E7%8E%B0\">实现</a></li>\n</ul>\n</div>\n<hr>\n<p>链表是表示一系列节点的数据结构，其中每个节点包含 节点的值 和 指向下一节点的指针。链表末端的节点指向空值 null。</p>\n<p><img src=\"/blogs/interview-%E7%AE%97%E6%B3%95/algorithm_3_pic_1.png#pic_center\" alt=\"pic_1\"></p>\n<h4 id=\"反转单链表\">反转单链表</h4>\n<p><img src=\"/blogs/interview-%E7%AE%97%E6%B3%95/algorithm_3_pic_2.png#pic_center\" alt=\"pic_2\"></p>\n<hr>\n<h4 id=\"思路\">思路</h4>\n<ul>\n<li>\n<p>设置三个变量用于存储</p>\n<blockquote>\n<p>prev = null;\ncurrent = 列表头部节点;\nnext = null</p>\n</blockquote>\n</li>\n<li>\n<p>将 next 赋值 当前节点的下一个节点(用于后面的 current 移动)</p>\n<blockquote>\n<p>next = current.next</p>\n</blockquote>\n</li>\n<li>\n<p>将当前节点的下一节点 指向 当前节点的上一节点</p>\n<blockquote>\n<p>current.next = prev</p>\n</blockquote>\n</li>\n<li>\n<p>将当前节点的上一节点 指向当前节点</p>\n<blockquote>\n<p>prev = current</p>\n</blockquote>\n</li>\n<li>\n<p>将当前节点指向 next(第二步，也就是向后移动)</p>\n<blockquote>\n<p>current = next</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/blogs/interview-%E7%AE%97%E6%B3%95/algorithm_3_pic_3.png#pic_center\" alt=\"pic_3\"></p>\n<hr>\n<h4 id=\"实现\">实现</h4>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"30390751520173520000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`function reverseList (head) {\n  let prev = null\n  let next = null\n  let current = head\n\n  while(current !== null) {\n    next = current.next\n    current.next = prev\n    prev = current\n    current = next\n  }\n  return prev\n}`, `30390751520173520000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">reverseList</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">head</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">prev</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">null</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">next</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">null</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">current</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">head</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">while</span><span class=\"mtk1\">(</span><span class=\"mtk12\">current</span><span class=\"mtk1\"> !== </span><span class=\"mtk4\">null</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">next</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">current</span><span class=\"mtk1\">.</span><span class=\"mtk12\">next</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">current</span><span class=\"mtk1\">.</span><span class=\"mtk12\">next</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">prev</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">prev</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">current</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">current</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">next</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">prev</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n</style>","frontmatter":{"title":"反转单链表","date":"2022-12-13 10:00","type":"interview-算法"},"excerpt":"反转单链表 思路 实现 链表是表示一系列节点的数据结构，其中每个节点包含 节点的值 和 指向下一节点的指针。链表末端的节点指向空值 null。 pic_1反转单链表 pic_2思路 设置三个变量用于存储 prev = null;\ncurrent = 列表头部节点;\nnext…","fields":{"readingTime":{"text":"2 min read"}}},"allDirectory":{"totalCount":15,"edges":[{"node":{"base":"css"}},{"node":{"base":"frontend"}},{"node":{"base":"interview-css"}},{"node":{"base":"interview-javascript"}},{"node":{"base":"interview-浏览器"}},{"node":{"base":"interview-计算机基础"}},{"node":{"base":"javascript"}},{"node":{"base":"nodejs"}},{"node":{"base":"react"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"typescript"}},{"node":{"base":"vue"}},{"node":{"base":"小程序"}},{"node":{"base":"科普"}},{"node":{"base":"interview-算法"}}]}},"pageContext":{"slug":"/interview-算法/algorithm_3/"}},"staticQueryHashes":["1487620982","3141419394","3649515864"]}