{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/interview-算法/algorithm_4/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"/Users/zhengjinyang/Documents/study/R-AS.github.io/src/pages/blogs/interview-算法/algorithm_4.md","html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#%E6%80%9D%E8%B7%AF\">思路</a></li>\n<li><a href=\"#%E5%AE%9E%E7%8E%B0\">实现</a></li>\n</ul>\n</div>\n<hr>\n<ul>\n<li>\n<p>描述：</p>\n<blockquote>\n<p>给定一个仅包含字符 '(', ')', '{', '}', '[' 和 ']' 的字符串 s，确定输入字符串是否有效\n输入字符串在以下情况下有效：</p>\n<ul>\n<li>括号必须用相同类型的括号闭合</li>\n<li>括号必须以正确的顺序闭合</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>约束：</p>\n<blockquote>\n<p>1 &#x3C;= s.length &#x3C;= 104\ns 仅包含括号 '()[]{}'</p>\n</blockquote>\n</li>\n<li>示例：</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"24266613359746445000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`Input: s = &quot;()&quot;\nOutput: true\n\nInput: s = &quot;()[]{}&quot;\nOutput: true\n\nInput: s = &quot;(]&quot;\nOutput: false\n\nInput: s = &quot;([)]&quot;\nOutput: false\n\nInput: s = &quot;{[]}&quot;\nOutput: true`, `24266613359746445000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"txt\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">Input: s = &quot;()&quot;</span>\n<span class=\"grvsc-line\">Output: true</span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\">Input: s = &quot;()[]{}&quot;</span>\n<span class=\"grvsc-line\">Output: true</span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\">Input: s = &quot;(]&quot;</span>\n<span class=\"grvsc-line\">Output: false</span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\">Input: s = &quot;([)]&quot;</span>\n<span class=\"grvsc-line\">Output: false</span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\">Input: s = &quot;{[]}&quot;</span>\n<span class=\"grvsc-line\">Output: true</span></code></pre>\n<hr>\n<h4 id=\"思路\">思路</h4>\n<ul>\n<li>使用堆栈(后进先出)，遍历整个字符串</li>\n<li>如果找到左括号，则将其添加到堆栈中</li>\n<li>如果找到右括号，则弹出堆栈中顶部的一个元素，确定当前的右括号是否与他匹配</li>\n</ul>\n<p><img src=\"/blogs/interview-%E7%AE%97%E6%B3%95/algorithm_4_pic_1.png#pic_center\" alt=\"pic_1\"></p>\n<hr>\n<h4 id=\"实现\">实现</h4>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"27937123250731900000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`const leftToRight = {\n  '(': ')',\n  '{': '}',\n  '[': ']',\n}\nconst isValid = function(s) {\n  if (!s) {\n    return true\n  }\n\n  // 创建堆栈\n  const stack = []\n  const len = s.length\n\n  // 遍历字符串\n  for (let i = 0; i < len; i++) {\n    const ch = s[i]\n\n    // 如果当前字符与条件约束一致，则将对应的右括号推进堆栈\n    if (ch === '(' || ch === '{' || ch === '[') {\n      stack.push(leftToRight[ch])\n    } else {\n      // 如果字符中没有与条件约束一致的字符 或者 右括号不与堆栈中顶部括号匹配(不对称)，则返回 false\n      if (!stack.length || stack.pop() !== ch) {\n        return false\n      }\n    }\n  }\n\n  return !stack.length\n}`, `27937123250731900000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">leftToRight</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk8\">&#39;(&#39;</span><span class=\"mtk12\">:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;)&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk8\">&#39;{&#39;</span><span class=\"mtk12\">:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;}&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk8\">&#39;[&#39;</span><span class=\"mtk12\">:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;]&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isValid</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">s</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">s</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 创建堆栈</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stack</span><span class=\"mtk1\"> = []</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">len</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">s</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 遍历字符串</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">len</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ch</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">s</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// 如果当前字符与条件约束一致，则将对应的右括号推进堆栈</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">ch</span><span class=\"mtk1\"> === </span><span class=\"mtk8\">&#39;(&#39;</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">ch</span><span class=\"mtk1\"> === </span><span class=\"mtk8\">&#39;{&#39;</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">ch</span><span class=\"mtk1\"> === </span><span class=\"mtk8\">&#39;[&#39;</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">stack</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk12\">leftToRight</span><span class=\"mtk1\">[</span><span class=\"mtk12\">ch</span><span class=\"mtk1\">])</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// 如果字符中没有与条件约束一致的字符 或者 右括号不与堆栈中顶部括号匹配(不对称)，则返回 false</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">stack</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">stack</span><span class=\"mtk1\">.</span><span class=\"mtk11\">pop</span><span class=\"mtk1\">() !== </span><span class=\"mtk12\">ch</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> !</span><span class=\"mtk12\">stack</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n</style>","frontmatter":{"title":"检查括号是否有效","date":"2022-12-13 10:59","type":"interview-算法"},"excerpt":"思路 实现 描述： 给定一个仅包含字符 '(', ')', '{', '}', '' 和 '' 的字符串 s，确定输入字符串是否有效\n输入字符串在以下情况下有效： 括号必须用相同类型的括号闭合 括号必须以正确的顺序闭合 约束： 1 <= s.length <= 104\ns…","fields":{"readingTime":{"text":"2 min read"}}},"allDirectory":{"totalCount":15,"edges":[{"node":{"base":"css"}},{"node":{"base":"frontend"}},{"node":{"base":"interview-css"}},{"node":{"base":"interview-javascript"}},{"node":{"base":"interview-浏览器"}},{"node":{"base":"interview-计算机基础"}},{"node":{"base":"javascript"}},{"node":{"base":"nodejs"}},{"node":{"base":"react"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"typescript"}},{"node":{"base":"vue"}},{"node":{"base":"小程序"}},{"node":{"base":"科普"}},{"node":{"base":"interview-算法"}}]}},"pageContext":{"slug":"/interview-算法/algorithm_4/"}},"staticQueryHashes":["1487620982","3141419394","3649515864"]}