{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/interview-算法/algorithm_1/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"/Users/zhengjinyang/Documents/study/R-AS.github.io/src/pages/blogs/interview-算法/algorithm_1.md","html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#%E6%80%9D%E8%B7%AF\">思路</a></li>\n<li><a href=\"#%E5%AE%9E%E7%8E%B0\">实现</a></li>\n</ul>\n</div>\n<hr>\n<h4 id=\"思路\">思路</h4>\n<ul>\n<li>在数组中找一个元素作为枢轴</li>\n<li>小于枢轴的元素移动到枢轴的左边，大于枢轴的元素移动到枢轴的右边</li>\n<li>对于枢轴左右的两个子集，重复第一步和第二步，直到所有子集中只剩下一个元素</li>\n</ul>\n<p><img src=\"/blogs/interview-%E7%AE%97%E6%B3%95/algorithm_1_pic_1.png#pic_center\" alt=\"pic_1\"></p>\n<hr>\n<h4 id=\"实现\">实现</h4>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"71918051615976910000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`const quickSort = function (arr) {\n  if (arr.length <= 1) {\n    return arr\n  }\n  // 选择一个枢轴，这里选择中间点\n  const pivotIndex = Math.floor(arr.length / 2)\n  // 取出中间点\n  const pivot = arr.splice(pivotIndex, 1)[0]\n  // 定义左子集\n  const left = []\n  // 定义右子集\n  const right = []\n\n  for (let i = 0; i < arr.length; i++) {\n    // 小于中间点，放左边子集\n    if (arr[i] < pivot) {\n      left.push(arr[i])\n    } else {\n      // 大于等于中间点，放右边子集\n      right.push(arr[i])\n    }\n  }\n  // 递归得出结果后连接\n  return quickSort(left).concat([pivot], quickSort(right))\n}\n\n/**\n* 结果：\n* 原数组：[86, 24, 64, 48, 15, 30, 90, 49]\n* 排序后：[15, 24, 30, 48, 49, 64, 86, 90]\n*/`, `71918051615976910000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">quickSort</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">arr</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">arr</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">arr</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 选择一个枢轴，这里选择中间点</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pivotIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk11\">floor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">arr</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 取出中间点</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pivot</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">arr</span><span class=\"mtk1\">.</span><span class=\"mtk11\">splice</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pivotIndex</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">)[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 定义左子集</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">left</span><span class=\"mtk1\"> = []</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 定义右子集</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">right</span><span class=\"mtk1\"> = []</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">arr</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// 小于中间点，放左边子集</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">arr</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] &lt; </span><span class=\"mtk12\">pivot</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">left</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk12\">arr</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// 大于等于中间点，放右边子集</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">right</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk12\">arr</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 递归得出结果后连接</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">quickSort</span><span class=\"mtk1\">(</span><span class=\"mtk12\">left</span><span class=\"mtk1\">).</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">([</span><span class=\"mtk12\">pivot</span><span class=\"mtk1\">], </span><span class=\"mtk11\">quickSort</span><span class=\"mtk1\">(</span><span class=\"mtk12\">right</span><span class=\"mtk1\">))</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">/**</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">* 结果：</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">* 原数组：[86, 24, 64, 48, 15, 30, 90, 49]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">* 排序后：[15, 24, 30, 48, 49, 64, 86, 90]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">*/</span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n</style>","frontmatter":{"title":"快速排序","date":"2022-12-12 16:05","type":"interview-算法"},"excerpt":"思路 实现思路 在数组中找一个元素作为枢轴 小于枢轴的元素移动到枢轴的左边，大于枢轴的元素移动到枢轴的右边 对于枢轴左右的两个子集，重复第一步和第二步，直到所有子集中只剩下一个元素 pic_1实现","fields":{"readingTime":{"text":"2 min read"}}},"allDirectory":{"totalCount":15,"edges":[{"node":{"base":"css"}},{"node":{"base":"frontend"}},{"node":{"base":"interview-css"}},{"node":{"base":"interview-javascript"}},{"node":{"base":"interview-浏览器"}},{"node":{"base":"interview-计算机基础"}},{"node":{"base":"javascript"}},{"node":{"base":"nodejs"}},{"node":{"base":"react"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"typescript"}},{"node":{"base":"vue"}},{"node":{"base":"小程序"}},{"node":{"base":"科普"}},{"node":{"base":"interview-算法"}}]}},"pageContext":{"slug":"/interview-算法/algorithm_1/"}},"staticQueryHashes":["1487620982","3141419394","3649515864"]}