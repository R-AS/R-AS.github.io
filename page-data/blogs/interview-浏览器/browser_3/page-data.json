{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/interview-浏览器/browser_3/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"/Users/zhengjinyang/Documents/study/R-AS.github.io/src/pages/blogs/interview-浏览器/browser_3.md","html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#%E7%BC%93%E5%AD%98%E7%9A%84%E5%A4%A7%E6%A6%82%E6%B5%81%E7%A8%8B\">缓存的大概流程</a></li>\n<li><a href=\"#%E5%BC%BA%E5%88%B6%E7%BC%93%E5%AD%98\">强制缓存</a></li>\n<li><a href=\"#%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98\">协商缓存</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n</div>\n<hr>\n<h4 id=\"缓存的大概流程\">缓存的大概流程</h4>\n<p><img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_1.png#pic_center\" alt=\"pic_1\">\n由上图可得知：</p>\n<ul>\n<li>浏览器每次发起请求，都会 先在浏览器缓存中查找该请求的结果以及缓存标识</li>\n<li>浏览器每次拿到返回的请求结果都会 将该结果和缓存标识存入浏览器缓存中</li>\n</ul>\n<hr>\n<h4 id=\"强制缓存\">强制缓存</h4>\n<p><font color=#f0764c>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</font></p>\n<p>强制缓存的情况主要有三种：</p>\n<ol>\n<li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）：\n<img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_2.png#pic_center\" alt=\"pic_1\"></li>\n<li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存：\n<img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_3.png#pic_center\" alt=\"pic_1\"></li>\n<li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果：\n<img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_4.png#pic_center\" alt=\"pic_1\"></li>\n</ol>\n<blockquote>\n<p>强制缓存的规则：当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别时 Expires 和 Cache-Control，其中 Cache-Control 优先级比 Expires 高。</p>\n</blockquote>\n<p>Expires 为服务器返回该请求结果 <strong>缓存的到期时间</strong>，即再次发起该请求时，如果客户端的时间小于 Expires 的值时，直接使用缓存结果。</p>\n<p>但如时区不同，客户端和服务器端有一方的时间不准确，导致误差，那么强制缓存则会直接失效。所以 Expire 被 Cache-Control 取代。</p>\n<p><font color=#f0764c>Cache-Control</font></p>\n<p>Cache-Control 的主要取值为：</p>\n<ul>\n<li>public：所有内容都将被缓存（客户端和代理服务器都可缓存）</li>\n<li>private：所有内容只有客户端可以缓存，Cache-Control的默认取值</li>\n<li>no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</li>\n<li>no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</li>\n<li>max-age=xxx (xxx is numeric)：缓存内容将在xxx秒后失效</li>\n</ul>\n<p><img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_5.png#pic_center\" alt=\"pic_1\">\n由上面的例子我们可以知道：</p>\n<ul>\n<li>HTTP 响应报文中 expires 的时间值，是一个绝对值</li>\n<li>HTTP 响应报文中 Cache-Control 为 max-age=600，是相对值</li>\n</ul>\n<p>由于 Cache-Control 的优先级比 expires 高，那么直接根据Cache-Control的值进行缓存，意思就是说在600秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。</p>\n<hr>\n<h4 id=\"协商缓存\">协商缓存</h4>\n<p><font color=#f0764c>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</font></p>\n<p>主要有一下两种情况：</p>\n<ul>\n<li>协商缓存生效，返回 304:\n<img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_6.png#pic_center\" alt=\"pic_1\"></li>\n<li>协商缓存失效，返回 200:\n<img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_7.png#pic_center\" alt=\"pic_1\"></li>\n</ul>\n<p>控制协商缓存的字段分别是：<font color=#f0764c>Last-Modified/If-Modified-Since</font> 和 <font color=#f0764c>Etag/If-None-Match</font>，其中 <font color=#f0764c>Etag/If-None-Match</font> 的优先级比 <font color=#f0764c>Last-Modified/If-Modified-Since</font> 高。</p>\n<p><font color=#f0764c>Last-Modified/If-Modified-Since</font> </p>\n<p>Last-Modified 是服务器响应请求时，返回该资源文件在服务器最后被修改的时间：\n<img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_8.png#pic_center\" alt=\"pic_1\"></p>\n<p>Last-Modified-Since 是客户端再次发起该请求时，携带上次请求返回的 Last-Modified 值。服务器通过对该修改时间进行对比，如果服务器资源最后被修改时间大于 If-Modified-Since 的字段值，则重新返回资源，状态码为 200。否则返回 304，继续使用缓存文件。</p>\n<p><font color=#f0764c>Etag</font> </p>\n<p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)\n<img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_9.png#pic_center\" alt=\"pic_1\"></p>\n<p>If-None-Match 是客户端再次发起该请求时，携带上次请求返回的唯一标识 Etag 值，服务器通过对比，如果 If-None-Match 值与 Etag 一致，则返回 304，继续使用缓存文件。不一致则重新返回资源文件，状态码为 200。</p>\n<hr>\n<h4 id=\"总结\">总结</h4>\n<p>浏览器缓存分为强制缓存和协商缓存，强制缓存优先于协商缓存进行。</p>\n<ul>\n<li>若强制缓存(Expires和Cache-Control,Cache-Control优先级高于Expires)生效则直接使用缓存</li>\n<li>若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高)，协商缓存由服务器决定是否使用缓存</li>\n<li>若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存。</li>\n</ul>\n<p>主要流程如下：</p>\n<p><img src=\"/blogs/interview-%E6%B5%8F%E8%A7%88%E5%99%A8/browser_3_pic_10.png#pic_center\" alt=\"pic_1\"></p>\n<hr>\n<p><strong>摘抄自</strong></p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6992843117963509791\">彻底理解浏览器的缓存机制</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n</style>","frontmatter":{"title":"浏览器缓存机制","date":"2022-10-19","type":"interview-浏览器"},"excerpt":"缓存的大概流程 强制缓存 协商缓存 总结缓存的大概流程 pic_…","fields":{"readingTime":{"text":"7 min read"}}},"allDirectory":{"totalCount":14,"edges":[{"node":{"base":"css"}},{"node":{"base":"frontend"}},{"node":{"base":"interview-css"}},{"node":{"base":"interview-javascript"}},{"node":{"base":"interview-浏览器"}},{"node":{"base":"interview-计算机基础"}},{"node":{"base":"javascript"}},{"node":{"base":"nodejs"}},{"node":{"base":"react"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"typescript"}},{"node":{"base":"vue"}},{"node":{"base":"小程序"}},{"node":{"base":"科普"}}]}},"pageContext":{"slug":"/interview-浏览器/browser_3/"}},"staticQueryHashes":["1487620982","3141419394","3649515864"]}