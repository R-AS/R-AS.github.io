{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/javascript/js_7/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"D:/study/R-AS.github.io/src/pages/blogs/javascript/js_7.md","html":"<h3 id=\"table-of-contents\">Table of Contents</h3>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF\">原型链继承</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF\">构造函数继承</a></li>\n<li><a href=\"#%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF%E7%BB%84%E5%90%88%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF\">组合继承(组合原型链继承和构造函数继承)</a></li>\n<li><a href=\"#%E5%8E%9F%E5%9E%8B%E5%BC%8F%E7%BB%A7%E6%89%BF\">原型式继承</a></li>\n<li><a href=\"#%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF\">寄生式继承</a></li>\n<li><a href=\"#%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF\">寄生组合式继承</a></li>\n</ul>\n</div>\n<hr>\n<p>太久没有练习 javaScript，基础都忘光了，现在回顾 javaScript 的集中继承方式，主要有 原型链继承、构造函数继承、组合继承、原型式继承、寄生式继承 和 寄生组合继承。</p>\n<h2 id=\"原型链继承\">原型链继承</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"92615201061799220000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 父类\nfunction Person(name) {\n  this.name = name\n  this.setName = function() {\n    console.log(this.name)\n  }\n}\n\nPerson.prototype.age = 10\n\n// 原型链继承\nfunction Per() {\n  this.name = 'ker'\n}\n\nPer.prototype = new Person()\n\nvar per = new Per()\n\nconsole.log(per)\nconsole.log(per instanceof Person)`, `92615201061799220000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 父类</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Person</span><span class=\"mtk1\">(</span><span class=\"mtk12\">name</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">name</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setName</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">Person</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk12\">age</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 原型链继承</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Per</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;ker&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">Per</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">per</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Per</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">per</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">per</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>结果如下：</p>\n<p><img src=\"/blogs/javascript/js_7_pic_1.png#pic_center\" alt=\"pic_1\"></p>\n<ul>\n<li>重点：将父类的实例赋值给新实例的原型</li>\n<li>特点：实例可继承的属性有 实例的构造函数的属性、父类构造函数属性、父类原型的属性</li>\n<li>\n<p>缺点：</p>\n<ol>\n<li>新实例无法向父类构造函数传参</li>\n<li>继承单一</li>\n<li>所有新实例都会共享父类实例的属性(原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改)</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"构造函数继承\">构造函数继承</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"54808875149524080000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`function Con() {\n  Person.call(this, 'jer')\n  this.age = 12\n}\n\nvar con = new Con()\n\nconsole.log(con)\nconsole.log(con instanceof Person)`, `54808875149524080000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Con</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">Person</span><span class=\"mtk1\">.</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;jer&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">age</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">12</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">con</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Con</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">con</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">con</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>结果如下：</p>\n<p><img src=\"/blogs/javascript/js_7_pic_2.png#pic_center\" alt=\"pic_2\"></p>\n<ul>\n<li>重点：用 call() 和 apply() 将父类构造函数引入子类函数(在子类函数中做了父类的复制)</li>\n<li>\n<p>特点：</p>\n<ol>\n<li>只继承了父类构造函数的属性，没有继承父类原型的属性</li>\n<li>可以继承多个构造函数属性(call 多个)</li>\n<li>在子实例中可向父实例传参</li>\n</ol>\n</li>\n<li>\n<p>缺点：</p>\n<ol>\n<li>只能继承父类构造函数的属性</li>\n<li>无法实现构造函数的复用</li>\n<li>每个新实例都有父类构造函数的副本</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"组合继承组合原型链继承和构造函数继承\">组合继承(组合原型链继承和构造函数继承)</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"23361901687442230000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`function SubType(name) {\n  Person.call(this, name)\n}\n\nSubType.prototype = new Person()\n\nvar sub = new SubType('gar')\n\nconsole.log(sub)`, `23361901687442230000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">SubType</span><span class=\"mtk1\">(</span><span class=\"mtk12\">name</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">Person</span><span class=\"mtk1\">.</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk12\">name</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">SubType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sub</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SubType</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;gar&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sub</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>结果如下：\n<img src=\"/blogs/javascript/js_7_pic_3.png#pic_center\" alt=\"pic_3\"></p>\n<ul>\n<li>重点：结合了两种模式的有点，传参和复用</li>\n<li>\n<p>特点：</p>\n<ol>\n<li>可以继承父类原型上的属性，可以传参，可复用</li>\n<li>每个新实例引入的构造函数属性是私有的</li>\n</ol>\n</li>\n<li>缺点：\n调用了两次父类构造函数(耗内存)，子类的构造函数会替代原型上的那个父类构造函数</li>\n</ul>\n<hr>\n<h2 id=\"原型式继承\">原型式继承</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"8572001868761970000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`function inherit(obj) {\n  function F() {}\n  F.prototype = obj\n  return new F()\n}\n\nvar sup = new inherit(new Person()) \nconsole.log(sup)`, `8572001868761970000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">inherit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">obj</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">F</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">F</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">obj</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">F</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sup</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">inherit</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">()) </span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sup</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>结果如下：</p>\n<p><img src=\"/blogs/javascript/js_7_pic_4.png#pic_center\" alt=\"pic_４\"></p>\n<ul>\n<li>重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理</li>\n<li>特点：类似于复制一个对象，用函数来包装</li>\n<li>\n<p>缺点：</p>\n<ol>\n<li>所有实例都会继承原型上的属性</li>\n<li>无法实现复用(新实例属性都是后面添加的)</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"寄生式继承\">寄生式继承</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"92476710793986720000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`function inherit(obj) {\n  function F() {}\n  F.prototype = obj\n  return new F()\n}\n\nfunction subobject(obj) {\n  var sub = inherit(obj)\n  sub.name = 'gar'\n  return sub\n}\n\nvar sup = new subobject(new Person)\n\nconsole.log(sup)`, `92476710793986720000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">inherit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">obj</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">F</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">F</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">obj</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">F</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">subobject</span><span class=\"mtk1\">(</span><span class=\"mtk12\">obj</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sub</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">inherit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">obj</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">sub</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;gar&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sub</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sup</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">subobject</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sup</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>结果如下：</p>\n<p><img src=\"/blogs/javascript/js_7_pic_5.png#pic_center\" alt=\"pic_5\"></p>\n<ul>\n<li>重点：就是给原型式继承外面套了个壳子</li>\n<li>优点：没有创建自定义类型，因为只是套了个壳子返回对象(这个)，这个函数顺理成章就成了创建的新对象</li>\n<li>缺点：没用到原型，无法复用</li>\n</ul>\n<hr>\n<h2 id=\"寄生组合式继承\">寄生组合式继承</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"83239569345397500000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`function inherit(obj) {\n  function F() {}\n  F.prototype = obj\n  return new F()\n}\n\nvar con = inherit(Person.prototype)\n\nfunction Sub() {\n  Person.call(this)\n}\n\nSub.prototype = con\ncon.constructor = Sub\n\nvar sub1 = new Sub()\n\nconsole.log(sub1)`, `83239569345397500000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">inherit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">obj</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">F</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">F</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">obj</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">F</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">con</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">inherit</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Person</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Sub</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">Person</span><span class=\"mtk1\">.</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">Sub</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">con</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">con</span><span class=\"mtk1\">.</span><span class=\"mtk12\">constructor</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Sub</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sub1</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Sub</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sub1</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>结果如下：</p>\n<p><img src=\"/blogs/javascript/js_7_pic_6.png#pic_center\" alt=\"pic_6\"></p>\n<ul>\n<li>重点：修复了组合继承的问题</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n</style>","frontmatter":{"title":"javascript 继承方式","date":"2020-07-10","type":"javascript"},"excerpt":"Table of Contents 原型链继承 构造函数继承 组合继承(组合原型链继承和构造函数继承) 原型式继承 寄生式继承 寄生组合式继承 太久没有练习 javaScript，基础都忘光了，现在回顾 javaScript…","fields":{"readingTime":{"text":"2 min read"}}},"allDirectory":{"totalCount":9,"edges":[{"node":{"base":"javascript"}},{"node":{"base":"nodejs"}},{"node":{"base":"css"}},{"node":{"base":"typescript"}},{"node":{"base":"frontend"}},{"node":{"base":"react"}},{"node":{"base":"科普"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"vue"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/js_7/"}}}