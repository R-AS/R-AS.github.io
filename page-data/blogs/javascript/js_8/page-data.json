{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/javascript/js_8/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"/Users/zhengjinyang/Documents/study/R-AS.github.io/src/pages/blogs/javascript/js_8.md","html":"<!---->\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\">工厂模式</a></li>\n<li><a href=\"#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\">单例模式</a></li>\n<li><a href=\"#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\">策略模式</a></li>\n<li><a href=\"#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\">代理模式</a></li>\n<li><a href=\"#%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F\">中介者模式</a></li>\n<li><a href=\"#%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F\">装饰者模式</a></li>\n</ul>\n</div>\n<hr>\n<h2 id=\"工厂模式\">工厂模式</h2>\n<ul>\n<li>定义：简单工厂模式是由一个方法来决定到底要创建哪个类的实例，而这些类通常都拥有相同的接口(属性和方法)</li>\n<li>\n<p>使用场景：</p>\n<ol>\n<li>对象的构建十分复杂</li>\n<li>需要依赖具体环境创建不同实例</li>\n<li>处理大量具有相同属性的小对象</li>\n</ol>\n</li>\n<li>\n<p>举例：</p>\n<ul>\n<li>计算器(加、减、乘、除)</li>\n<li>自行车售卖(山地、公路)</li>\n<li>饮料机(咖啡、牛奶、水)</li>\n<li>\n<p>RPG 中职业(战士、法师、射手)\n这里以 RPG 中职业(战士、法师、射手)来做说明：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"22996522831003017000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 先创建各个角色的构造函数\nfunction Warrior() {\nthis.skill = '回血'\nthis.blood = 150  // 初始化生命值\nthis.hit = 8 // 普通攻击伤害\nconsole.log(this)\n}`, `22996522831003017000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 先创建各个角色的构造函数</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Warrior</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">skill</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;回血&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">blood</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">150</span><span class=\"mtk1\">  </span><span class=\"mtk3\">// 初始化生命值</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">hit</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// 普通攻击伤害</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>function Mage() {\nthis.skill = '冰冻'\nthis.blood = 120  // 初始化生命值\nthis.hit = 3  // 普通攻击伤害\nconsole.log(this)\n}</p>\n<p>function Archer() {\nthis.skill = '消耗'\nthis.blood = 110  // 初始化生命值\nthis.hit = 10 // 普通攻击伤害\nconsole.log(this)\n}</p>\n<p>const RoleFactory = {\ncreateRole (role) {\nlet roler\nswitch (role) {\ncase '战士':\nroler = new Warrior()\nbreak\ncase '法师':\nroler = new Mage()\nbreak\ncase '射手':\nroler = new Archer()\nbreak\ndefault:\nroler = new Warrior()\n}\n}\n}</p>\n<p>Object.freeze(RoleFactory)  // 冻结该对象，防止他人操作</p>\n<p>// 创建各个角色的实例\nvar warrior1 = RoleFactory.createRole('战士') // 创建一个战士\nvar mage1 = RoleFactory.createRole('法师') // 创建一个法师\nvar arche1 = RoleFactory.createRole('射手') // 创建一个射手</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">运行结果:</span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\">```javascript</span>\n<span class=\"grvsc-line\">Warrior { skill: &#39;回血&#39;, blood: 150, hit: 8 }</span>\n<span class=\"grvsc-line\">Mage { skill: &#39;冰冻&#39;, blood: 120, hit: 3 }</span>\n<span class=\"grvsc-line\">Archer { skill: &#39;消耗&#39;, blood: 110, hit: 10 }</span></code></pre>\n<hr>\n<h2 id=\"单例模式\">单例模式</h2>\n<ul>\n<li>定义：单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象</li>\n</ul>\n<p>在 JavaScript 里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象</p>\n<ul>\n<li>举例：模态框、登录控件、注销控件</li>\n</ul>\n<p>下面均已登录模态框做说明</p>\n<ol>\n<li><strong>引入代理实现单例模式</strong></li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"2282485828970859300\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`var CreateDiv = function (html) {\n  this.html = html\n  this.init()\n}\n\nCreateDiv.prototype.init = function () {\n  var div = document.createElement('div')\n  div.innerHTML = this.html\n  document.body.appendChild(div)\n}\n\nvar ProxySingletonCreateDiv = (function () {\n  var instance\n  return function (html) {\n    if (!instance) {\n      instance = new CreateDiv(html)\n    }\n    return instance\n  }\n})()\n\nvar a = new ProxySingletonCreateDiv('seven1')\nvar b = new ProxySingletonCreateDiv('seven2')\n\nconsole.log(a === b)  // true`, `2282485828970859300`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CreateDiv</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">html</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">html</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">html</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">init</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">CreateDiv</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk11\">init</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">div</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">document</span><span class=\"mtk1\">.</span><span class=\"mtk11\">createElement</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;div&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">div</span><span class=\"mtk1\">.</span><span class=\"mtk12\">innerHTML</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">html</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">document</span><span class=\"mtk1\">.</span><span class=\"mtk12\">body</span><span class=\"mtk1\">.</span><span class=\"mtk11\">appendChild</span><span class=\"mtk1\">(</span><span class=\"mtk12\">div</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ProxySingletonCreateDiv</span><span class=\"mtk1\"> = (</span><span class=\"mtk4\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">instance</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">html</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">instance</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">instance</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">CreateDiv</span><span class=\"mtk1\">(</span><span class=\"mtk12\">html</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">instance</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ProxySingletonCreateDiv</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;seven1&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ProxySingletonCreateDiv</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;seven2&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">a</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">b</span><span class=\"mtk1\">)  </span><span class=\"mtk3\">// true</span></span></code></pre>\n<p>PS：我们负责管理单例的逻辑移到了代理类ProxySingletonCreateDiv中。</p>\n<p>这样一来，CreateDiv就变成了一个普通的类，他跟ProxySingletonCreateDiv组合起来可以达到单例模式的效果。</p>\n<ol start=\"2\">\n<li><strong>通用的单例模式</strong></li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"88205347898207170000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 通用的单例验证方法\nconst getSingle = function (fn) {\n  let result\n  return function () {\n    return result || (result = fn.apply(this, arguments))\n  }\n}\n\n// 创建登录模态框\nconst createLoginLayer = function () {\n  const div = document.createELement('div')\n  div.innerHTML = '我是登录模态框'\n  document.body.appendChild(div)\n  return div\n}\n\n// 为登录模态框使用单例模式\nconst createSingleLoginLayer = getSingle(createLoginLayer)\nconst loginLayer1 = createSingleLoginLayer()\nconst loginLayer2 = createSignleLoginLayer()\n\nconsole.log(loginLayer1 === loginLayer2)  // true`, `88205347898207170000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 通用的单例验证方法</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getSingle</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">fn</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> || (</span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">fn</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk4\">arguments</span><span class=\"mtk1\">))</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 创建登录模态框</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">createLoginLayer</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">div</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">document</span><span class=\"mtk1\">.</span><span class=\"mtk11\">createELement</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;div&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">div</span><span class=\"mtk1\">.</span><span class=\"mtk12\">innerHTML</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;我是登录模态框&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">document</span><span class=\"mtk1\">.</span><span class=\"mtk12\">body</span><span class=\"mtk1\">.</span><span class=\"mtk11\">appendChild</span><span class=\"mtk1\">(</span><span class=\"mtk12\">div</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">div</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 为登录模态框使用单例模式</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">createSingleLoginLayer</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getSingle</span><span class=\"mtk1\">(</span><span class=\"mtk12\">createLoginLayer</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">loginLayer1</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">createSingleLoginLayer</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">loginLayer2</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">createSignleLoginLayer</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">loginLayer1</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">loginLayer2</span><span class=\"mtk1\">)  </span><span class=\"mtk3\">// true</span></span></code></pre>\n<p>这时不管你执行多少次 createSingleLoginLoyer() 方法，都只会生产一个 div 节点。</p>\n<p>我们的通用单例模式就完成了。</p>\n<ol start=\"3\">\n<li><strong>惰性单例</strong></li>\n<li>惰性单例指的是在需要的时候才创建对象的实例</li>\n</ol>\n<p>以创建登录模态框为例</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"68013456930320990000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`const createLoginLayer = (function () {\n  let div\n  return function () {\n    if (!div) {\n      div = document.createELement('div')\n      div.innerHTML = '我是登录模态框'\n    }\n    return div\n  }\n})()\n\n// 在点击按钮时才创建节点\ndocument.getElementById('login-btn').onclick = function () {\n  var loginLayer = createLoginLayer()\n  loginLayer.style.display = 'block'\n}`, `68013456930320990000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">createLoginLayer</span><span class=\"mtk1\"> = (</span><span class=\"mtk4\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">div</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">div</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">div</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">document</span><span class=\"mtk1\">.</span><span class=\"mtk11\">createELement</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;div&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">div</span><span class=\"mtk1\">.</span><span class=\"mtk12\">innerHTML</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;我是登录模态框&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">div</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 在点击按钮时才创建节点</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">document</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getElementById</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;login-btn&#39;</span><span class=\"mtk1\">).</span><span class=\"mtk11\">onclick</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">loginLayer</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">createLoginLayer</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">loginLayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">style</span><span class=\"mtk1\">.</span><span class=\"mtk12\">display</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;block&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>这里的对惰性单例的实现主要是只有单例了网页上的登录按钮，才会去创建，登录框的dom节点，并且只是创建一次。</p>\n<hr>\n<h2 id=\"策略模式\">策略模式</h2>\n<ul>\n<li>定义：定义一系列的算法，把他们一个个封装起来，并且使他们可以互相替换</li>\n<li>使用场景：表单校验(是否为空、长度、手机号、邮箱等等)</li>\n<li>示例：</li>\n</ul>\n<p>计算年终奖(工资、绩效)</p>\n<p>比如公司的年终奖是根据员工的工资和绩效来考核的，绩效为A的人，年终奖为工资的4倍，\n绩效为B的人，年终奖为工资的3倍，绩效为C的人，年终奖为工资的2倍；</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"20408779192838787000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 一组策略类封装具体的算法\nconst Bouns = {\n  A(salary) {\n    return salary * 4\n  },\n  B(salary) {\n    return salary * 3\n  },\n  C(salary) {\n    return salary * 2\n  }\n}\nObject.freeze(Bouns)\n\n/*\n* 计算年终奖 环境类Context\n* @param {String} A 效绩等级\n* @param {Number} 10000 每月工资\n* @returns {Number} 40000 年终奖\n*/\nconst calculateBouns = function (type, salary) {\n  return Bouns[type](salary)\n}\n\n// 测试年终奖计算方式\nconst demo1 = calculateBouns('A', 10000)\nconst demo2 = calculateBouns('B', 80000)\nconsole.log(demo1, demo2) // 40000, 240000`, `20408779192838787000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 一组策略类封装具体的算法</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Bouns</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">A</span><span class=\"mtk1\">(</span><span class=\"mtk12\">salary</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">salary</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">4</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">B</span><span class=\"mtk1\">(</span><span class=\"mtk12\">salary</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">salary</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">3</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">C</span><span class=\"mtk1\">(</span><span class=\"mtk12\">salary</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">salary</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">freeze</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Bouns</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">/*</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">* 计算年终奖 环境类Context</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">* @param {String} A 效绩等级</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">* @param {Number} 10000 每月工资</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">* @returns {Number} 40000 年终奖</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">*/</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">calculateBouns</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">type</span><span class=\"mtk1\">, </span><span class=\"mtk12\">salary</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Bouns</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">](</span><span class=\"mtk12\">salary</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 测试年终奖计算方式</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">demo1</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">calculateBouns</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;A&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10000</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">demo2</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">calculateBouns</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;B&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">80000</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">demo1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">demo2</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// 40000, 240000</span></span></code></pre>\n<p>PS：\n策略模式指的是定义一系列的算法，把它们一个个封装起来，将不变的部分和变化的部分隔开，实际就是将算法的使用和实现分离出来；算法的使用方式是不变的，都是根据某个算法取得计算后的奖金数，而算法的实现是根据绩效对应不同的绩效规则；</p>\n<p>一个基于策略模式的程序至少由2部分组成，第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类Context，该Context接收客户端的请求，随后把请求委托给某一个策略类。</p>\n<p>复合开放-封闭原则，可变的部分为策略类（一组算法），不变的部分为执行具体算法的方式。</p>\n<hr>\n<h2 id=\"代理模式\">代理模式</h2>\n<ul>\n<li>定义：为一个对象提供一个代用品或占位符，以便控制对他的访问。代理对象和本体对象实现了同样的接口，并且会把任何方法调用传递给本体对象。</li>\n<li>\n<p>使用场景：</p>\n<ul>\n<li>图片预加载、图片懒加载</li>\n<li>合并 HTTP 请求(代理收集一定时间内的所有 HTTP 请求，然后一次性发给服务器)</li>\n<li>惰性加载(通过代理处理和收集一些基本操作，然后仅在真正需要本体的时候才加载本体)</li>\n<li>缓存代理(缓存请求结果、计算结果)</li>\n</ul>\n</li>\n<li><strong>缓存代理</strong></li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"10026842520375446000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 先实现具体的两个算法\nconst mult = function () {\n  let a = 1\n  for (let i = 0; i < arguments.length; i++) {\n    a *= arguments[i]\n  }\n  return a\n}\nconst plus = function () {\n  let a = 0\n  for (let i = 0; i < arguments.length; i++) {\n    a += arguments[i]\n  }\n  return a\n}\n\n// 创建缓存代理\nconst createProcyFactory = function (fn) {\n  let cache = {}  // 保存计算的结果\n  // 使用闭包在内存中保留对 cache 的引用\n  return function() {\n    let args = Array.from(arguments).join(',')  // 将所有参数转化为字符串作为缓存的 key\n    if (args in cache) {\n      return cache[args]\n    } else {\n      return cache[args] = fn.apply(this.arguments)\n    }\n  }\n}\n\n// 使用代理对象\nconst proxyMult = createProxyFactory(mult)\nconst proxyPlus = createProxyFactory(plus)\nconsole.log(proxyMult(1, 2, 3, 4))  // 24\nconsole.log(proxyPlus(1, 2, 3, 4))  // 10`, `10026842520375446000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 先实现具体的两个算法</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mult</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk4\">arguments</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> *= </span><span class=\"mtk4\">arguments</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">plus</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk4\">arguments</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> += </span><span class=\"mtk4\">arguments</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 创建缓存代理</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">createProcyFactory</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">fn</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cache</span><span class=\"mtk1\"> = {}  </span><span class=\"mtk3\">// 保存计算的结果</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 使用闭包在内存中保留对 cache 的引用</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">args</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">Array</span><span class=\"mtk1\">.</span><span class=\"mtk11\">from</span><span class=\"mtk1\">(</span><span class=\"mtk4\">arguments</span><span class=\"mtk1\">).</span><span class=\"mtk11\">join</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;,&#39;</span><span class=\"mtk1\">)  </span><span class=\"mtk3\">// 将所有参数转化为字符串作为缓存的 key</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">args</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cache</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cache</span><span class=\"mtk1\">[</span><span class=\"mtk12\">args</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cache</span><span class=\"mtk1\">[</span><span class=\"mtk12\">args</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">fn</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arguments</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 使用代理对象</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxyMult</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">createProxyFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mult</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxyPlus</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">createProxyFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">plus</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk11\">proxyMult</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\">))  </span><span class=\"mtk3\">// 24</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk11\">proxyPlus</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\">))  </span><span class=\"mtk3\">// 10</span></span></code></pre>\n<p>PS：这里每次进行同类的计算时（乘法和加法两类），先判断缓存对象cache中是否存在该参数连接成的字符串作为key的属性。</p>\n<p>如果有，则直接从cache中读取，否则就进行计算并保存其结果。</p>\n<ol start=\"2\">\n<li><strong>虚拟代理</strong></li>\n<li>定义：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建</li>\n<li>使用场景：使用虚拟代理实现图片懒加载</li>\n<li>示例：</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"2370144963324638700\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 本地对象\nconst imgFunc = (function() {\n  const imgNode = document.createElement('img')\n  document.body.appendChild(imgNode)\n  return {\n    setSrc(src) {\n      imgNode.src = src\n    }\n  }\n})()\n\n// 代理对象\nconst proxyImage = (function() {\n  const img = new Image()\n  img.onload = function() {\n    imgFunc.setSrc(this.src)\n  }\n  return {\n    setSrc(src) {\n      imgFunc.setSrc('./loading.gif')\n      img.src = src\n    }\n  }\n})()\n\n// 使用代理对象\nproxyImage.setSrc('./reality.png')`, `2370144963324638700`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 本地对象</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">imgFunc</span><span class=\"mtk1\"> = (</span><span class=\"mtk4\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">imgNode</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">document</span><span class=\"mtk1\">.</span><span class=\"mtk11\">createElement</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;img&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">document</span><span class=\"mtk1\">.</span><span class=\"mtk12\">body</span><span class=\"mtk1\">.</span><span class=\"mtk11\">appendChild</span><span class=\"mtk1\">(</span><span class=\"mtk12\">imgNode</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">setSrc</span><span class=\"mtk1\">(</span><span class=\"mtk12\">src</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">imgNode</span><span class=\"mtk1\">.</span><span class=\"mtk12\">src</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">src</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 代理对象</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxyImage</span><span class=\"mtk1\"> = (</span><span class=\"mtk4\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">img</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Image</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">img</span><span class=\"mtk1\">.</span><span class=\"mtk11\">onload</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">imgFunc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setSrc</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">src</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">setSrc</span><span class=\"mtk1\">(</span><span class=\"mtk12\">src</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">imgFunc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setSrc</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;./loading.gif&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">img</span><span class=\"mtk1\">.</span><span class=\"mtk12\">src</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">src</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 使用代理对象</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">proxyImage</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setSrc</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;./reality.png&#39;</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>PS：图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。</p>\n<hr>\n<h2 id=\"中介者模式\">中介者模式</h2>\n<ul>\n<li>定义：中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者对象后，\n所有的相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，\n只需要通知中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。\n中介者模式使网状的多对多关系变成了相对简单的一对多关系。</li>\n<li>\n<p>使用场景：</p>\n<ol>\n<li>手机购买页面(颜色、数量、内存、价格)</li>\n<li>MVC 模式(控制层便是位于表现层与模型层之间的中介这)</li>\n</ol>\n</li>\n<li><strong>MVC 模式</strong></li>\n<li>定义：我们应该很熟悉 MVC 三层模型实体模型（Model）、视图表现层（View）还有控制层（Control/Mediator）。MVC 模式中的Control/Mediator 层，就是本设计模式的中介者 (它必须拿到 View 和 Model 的引用)。</li>\n<li>示例：</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"50620479796783740000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 模拟 Model, View, Controller\nconst M = {}, V = {}, C = {}\n\n// Model 负责存放资料\nM.data = 'hello world'\n\n// View 负责将资料输出到荧幕上\nV.render = M => { alert(M.data) }\n\n// Controller 作为一个 M 和 V 的桥梁\nC.handleOnload = () => { V.render(M) }\n\n// 在网页读取时呼叫 Controller\nwindow.onload = C.handleOnload`, `50620479796783740000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 模拟 Model, View, Controller</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">M</span><span class=\"mtk1\"> = {}, </span><span class=\"mtk12\">V</span><span class=\"mtk1\"> = {}, </span><span class=\"mtk12\">C</span><span class=\"mtk1\"> = {}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// Model 负责存放资料</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">M</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;hello world&#39;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// View 负责将资料输出到荧幕上</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">V</span><span class=\"mtk1\">.</span><span class=\"mtk11\">render</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">M</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> { </span><span class=\"mtk11\">alert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">M</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\">) }</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// Controller 作为一个 M 和 V 的桥梁</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">C</span><span class=\"mtk1\">.</span><span class=\"mtk11\">handleOnload</span><span class=\"mtk1\"> = () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">V</span><span class=\"mtk1\">.</span><span class=\"mtk11\">render</span><span class=\"mtk1\">(</span><span class=\"mtk12\">M</span><span class=\"mtk1\">) }</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 在网页读取时呼叫 Controller</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">window</span><span class=\"mtk1\">.</span><span class=\"mtk12\">onload</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">C</span><span class=\"mtk1\">.</span><span class=\"mtk12\">handleOnload</span></span></code></pre>\n<hr>\n<h2 id=\"装饰者模式\">装饰者模式</h2>\n<ul>\n<li>定义：装饰者(decorator)模式能够在不改变对象自身的基础上，在程序运行期间给对象动态的添加职责。\n装饰者用于通过重载方法的形式添加新功能，该模式可以在被装饰者前面或者后面加上自己的行为以达到特定的目的。</li>\n</ul>\n<p>与继承相比，装饰者是一种更轻便灵活的做法。</p>\n<p>普通对象被装饰者包裹起来，就形成了装饰者模式。</p>\n<ul>\n<li>示例：</li>\n<li><strong>雷霆战机(吃道具的例子)</strong></li>\n</ul>\n<p>介绍：</p>\n<ul>\n<li>现在我们假设正在开发一个小游戏–雷霆战机</li>\n<li>最开始我们使用最渣的飞机，只能发射普通子弹</li>\n<li>吃一颗星，可以发射普通子弹和发射散弹</li>\n<li>再吃一颗，可以发射普通子弹和散弹和跟踪导弹</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"50591612142321550000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 一级飞机\nconst plane = {\n  fire() { console.log('发射普通子弹') }\n}\nplane.fire()  // 发射普通子弹\n\n// 二级飞机\nconst fire1 = plane.fire\nconst shot = () => { console.log('发射散弹') }\n\nplane.fire = () => {\n  fire1()\n  shot()\n}\n\nplane.fire()  // 发射普通子弹、发射散弹\n\n// 三级飞机\nconst fire2 = plane.fire\nconst track = () => { console.log('发射跟踪导弹') }\nplane.fire = () => {\n  fire2()\n  track()\n}\nplane.fire()  // 发射普通子弹 发射散弹 发射跟踪导弹`, `50591612142321550000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 一级飞机</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">plane</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">fire</span><span class=\"mtk1\">() { </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;发射普通子弹&#39;</span><span class=\"mtk1\">) }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">plane</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fire</span><span class=\"mtk1\">()  </span><span class=\"mtk3\">// 发射普通子弹</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 二级飞机</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fire1</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">plane</span><span class=\"mtk1\">.</span><span class=\"mtk12\">fire</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">shot</span><span class=\"mtk1\"> = () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> { </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;发射散弹&#39;</span><span class=\"mtk1\">) }</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">plane</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fire</span><span class=\"mtk1\"> = () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">fire1</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">shot</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">plane</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fire</span><span class=\"mtk1\">()  </span><span class=\"mtk3\">// 发射普通子弹、发射散弹</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 三级飞机</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fire2</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">plane</span><span class=\"mtk1\">.</span><span class=\"mtk12\">fire</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">track</span><span class=\"mtk1\"> = () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> { </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;发射跟踪导弹&#39;</span><span class=\"mtk1\">) }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">plane</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fire</span><span class=\"mtk1\"> = () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">fire2</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">track</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">plane</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fire</span><span class=\"mtk1\">()  </span><span class=\"mtk3\">// 发射普通子弹 发射散弹 发射跟踪导弹</span></span></code></pre>\n<p>PS：这样给对象动态的增加职责的方式就没有改变对象自身，一个对象放入另一个对象就形成了一条装饰链(一个聚合对象)， 而上面的shot和track也就是装饰者、装饰函数 ，当函数执行时，会把请求转给链中的下一个对象。</p>\n<ol start=\"2\">\n<li>在 Function 原型上封装通用的装饰函数</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"75043770672656220000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 在原函数之前执行\nFunction.prototype.before = function(beforefn) {\n  var _this = this  // 保存旧函数的引用\n  return function() { // 返回包含旧函数和新函数的&quot;代理&quot;函数\n    beforefn.apply(this.arguments)  // 执行新函数,且保证this不被劫持,新函数接受的参数\n    return _this.apply(this.arguments)  // 也会被原封不懂的传入旧函数，新函数在旧函数之前执行\n  }\n}\n\n// 在原函数之后执行\nFunction.prototype.after = function(afterfn) {\n  const _this = this\n  return function() {\n    var ret = _this.apply(this.arguments)\n    afterfn.apply(this.arguments)\n    return ret\n  }\n}`, `75043770672656220000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 在原函数之前执行</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">Function</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk11\">before</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">beforefn</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_this</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">this</span><span class=\"mtk1\">  </span><span class=\"mtk3\">// 保存旧函数的引用</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\">() { </span><span class=\"mtk3\">// 返回包含旧函数和新函数的&quot;代理&quot;函数</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">beforefn</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arguments</span><span class=\"mtk1\">)  </span><span class=\"mtk3\">// 执行新函数,且保证this不被劫持,新函数接受的参数</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arguments</span><span class=\"mtk1\">)  </span><span class=\"mtk3\">// 也会被原封不懂的传入旧函数，新函数在旧函数之前执行</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 在原函数之后执行</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">Function</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk11\">after</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">afterfn</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_this</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">this</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ret</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arguments</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">afterfn</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arguments</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ret</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<ol start=\"3\">\n<li>封装成单独函数(不污染原型)</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"49810972721599730000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// 在原函数之前执行\nconst before = function(fn, before) {\n  return function() {\n    before.apply(this.arguments)\n    return fn.apply(this.arguments)\n  }\n}\n\n// 使用\nbefore(func1, func2)\n\n// 在原函数之后执行\nconst after = function(fn, after) {\n  return function() {\n    const ret = fn.apply(this.arguments)\n    after.apply(this.arguments)\n    return ret\n  }\n}\n\n// 使用\nafter(func1, func2)`, `49810972721599730000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// 在原函数之前执行</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">before</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">fn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">before</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">before</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arguments</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fn</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arguments</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 使用</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk11\">before</span><span class=\"mtk1\">(</span><span class=\"mtk12\">func1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">func2</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 在原函数之后执行</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">after</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">fn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">after</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ret</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">fn</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arguments</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">after</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arguments</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ret</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 使用</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk11\">after</span><span class=\"mtk1\">(</span><span class=\"mtk12\">func1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">func2</span><span class=\"mtk1\">)</span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n</style>","frontmatter":{"title":"设计模式","date":"2020-07-11","type":"javascript"},"excerpt":"…","fields":{"readingTime":{"text":"16 min read"}}},"allDirectory":{"totalCount":14,"edges":[{"node":{"base":"css"}},{"node":{"base":"frontend"}},{"node":{"base":"interview-css"}},{"node":{"base":"interview-javascript"}},{"node":{"base":"interview-浏览器"}},{"node":{"base":"interview-计算机基础"}},{"node":{"base":"javascript"}},{"node":{"base":"nodejs"}},{"node":{"base":"react"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"typescript"}},{"node":{"base":"vue"}},{"node":{"base":"小程序"}},{"node":{"base":"科普"}}]}},"pageContext":{"slug":"/javascript/js_8/"}},"staticQueryHashes":["1487620982","3141419394","3649515864"]}