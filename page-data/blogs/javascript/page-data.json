{"componentChunkName":"component---src-templates-preview-jsx","path":"/blogs/javascript","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3 id=\"table-of-contents\">Table of Contents</h3>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#1-windowopenstrurl-strwindowname-strwindowfeatures\">1. window.open(strUrl, strWindowName, strWindowFeatures)</a></li>\n<li><a href=\"#2-%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8\">2. 单页应用</a></li>\n<li><a href=\"#3-%E7%9B%91%E5%90%AC-url-%E4%B8%AD%E7%9A%84-hash-%E5%8F%98%E5%8C%96\">3. 监听 url 中的 hash 变化</a></li>\n</ul>\n</div>\n<hr>\n<p><strong>本文记录一些页面跳转以及监听 URL 的知识</strong></p>\n<h3 id=\"1-windowopenstrurl-strwindowname-strwindowfeatures\">1. window.open(strUrl, strWindowName, strWindowFeatures)</h3>\n<p>window.open() 可以用来新开窗口加载指定资源，它有三个参数:</p>\n<ul>\n<li>strUrl: 要在新打开的窗口中加载的 URL</li>\n<li>strWindowName: 新开窗口的名称</li>\n<li>strWindowFeatres: 一个可选参数, 列出新窗口的特征(大小、位置、滚动条等)作为一个 DOMString</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">let windowObjectReference = window.open(strUrl, strWindowName, [strWindowFeatrues])</span><span class=\"token punctuation\">**</span></span>\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">返回的是新窗口对象的引用，若调用失败，返回值会是 null</span><span class=\"token punctuation\">**</span></span>\n如下:</code></pre></div>\n<p><img src=\"/blogs/javascript/js_1_pic_1.png#pic_center\" alt=\"pic_1\"></p>\n<p><strong>注意这三个参数：</strong></p>\n<ol>\n<li><strong>strUrl</strong>: 新窗口需要载入的 url 地址. strUrl 可以是 web 上的 html 页面也可以是图片文件或其他任何浏览器支持的文件格式</li>\n<li>\n<p><strong>strWindowName</strong>: 新窗口的名称.该字符串可以用来作为超链接 <code class=\"language-text\">&lt;a&gt;</code> 或表单 <code class=\"language-text\">&lt;form&gt;</code> 元素的目标属性值. 字符串中不能含有空白字符. </p>\n<ul>\n<li><strong>strWindowName 并不是新窗口的标题, 可以理解成每个窗口的 id, 假如跳转窗口的名称一样， 则是覆盖同名称的窗口, 反之亦然</strong>， 如下图:</li>\n</ul>\n<p><img src=\"/blogs/javascript/js_1_pic_2.png#pic_center\" alt=\"pic_2\"></p>\n<ul>\n<li>\n<p>strWindowName 与 <code class=\"language-text\">&lt;a&gt;</code> 标签的应用：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--点击 window_1 后会新开页面到 www.baidu.com--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://www.baidu.com<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>window_1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>window_1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">let</span> windowObjectReference <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'window_1'</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><strong>strWindowFeatures</strong>: 可选参数. 是一个字符串值, 这个值列出了将要打开的窗口的一些特性(窗口功能和工具栏). 字符串中不能包含任何空白字符, 特性之间用逗号分隔开. 参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open#Position%20and%20size%20features\">位置和尺寸特征</a></li>\n</ol>\n<hr>\n<h3 id=\"2-单页应用\">2. 单页应用</h3>\n<p>单页应用是的页面可以在无刷新的条件下重新渲染, 可通过 hash 或者 history 使 url 改变但不刷新页面</p>\n<p><strong>1. hash</strong></p>\n<p>window.location 是一个只读属性, 返回一个 Location 对象, 其中包含有关文档当前位置的信息.hash 是他的一个属性\n可通过以下操作来实现单页跳转:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> <span class=\"token string\">'edit'</span> <span class=\"token comment\">// 不会刷新页面</span></code></pre></div>\n<p>或者</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">'#edit'</span><span class=\"token operator\">></span>edit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span></code></pre></div>\n<p><strong>2.history</strong></p>\n<p>Window.history 是一个只读属性, 用来获取 History 对象的引用, History 对象提供了操作浏览器会话历史（浏览器地址栏中访问的页面, 以及当前页面中通过框架加载的页面）的接口</p>\n<p><strong>History 的属性:</strong></p>\n<ul>\n<li>length: 返回在会话历史中有多少条记录, 包含了当前会话页面</li>\n<li>state: 保存了会触发 popState 事件的方法, 所传递过来的属性对象(<strong>如果不进行 pushState() or replaceState() 两种类型的调用，state 的值将会是 null</strong>)</li>\n</ul>\n<p><strong>History 的方法:</strong></p>\n<ul>\n<li>back(): 在 history 中向后跳转</li>\n<li>forward(): 在 history 中向前跳转</li>\n<li>\n<p>go(): 跳转到 history 中指定的一个点</p>\n<ul>\n<li>window.history.go(-1) // 相当于 back()</li>\n<li>window.history.go(1)  // forward()</li>\n</ul>\n</li>\n<li>\n<p>pushState(): pushState 可以将给定的数据压入到浏览器会话历史栈中, pushState 后会改变当前页面 url, 但不会伴随着刷新</p>\n<p>例如: url 产生了变化(<a href=\"https://www.xxx.com/bar.html\">https://www.xxx.com/bar.html</a>)，history 的 state 被推入了 { foo: 'bar' }, 但页面不会刷新</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> stateObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nfoo<span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>replaceState(): replaceState将当前的会话页面的url替换成指定的数据, replaceState后也会改变当前页面的url, 但是也不会刷新页面</li>\n</ul>\n<p><strong>pushState 和 replaceState 的异同:</strong></p>\n<ul>\n<li>同: 都会改变当前页面显示的 url, 但不会刷新页面</li>\n<li>异: pushState是压入浏览器的会话历史栈中, 会使得History.length加1, 而replaceState是替换当前的这条会话历史, 因此不会增加History.length</li>\n</ul>\n<hr>\n<h3 id=\"3-监听-url-中的-hash-变化\">3. 监听 url 中的 hash 变化</h3>\n<p>通过 hash 改变了 url, 会触发 hashchange 事件, 可通过监听 hashchange 事件来捕获到通过 hash 改变 url 的行为</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onhashchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 或者</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hashchange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>当 hash 值改变时, 输出一个 HashChangeEvent</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>isTrusted<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> oldURL<span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:3000/\"</span><span class=\"token punctuation\">,</span> newURL<span class=\"token operator\">:</span>   <span class=\"token string\">\"http://localhost:3000/#teg\"</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"hashchange\"</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>可通过监听事件, 加入回调展示或隐藏不同 UI 显示的功能等</p>\n<hr>\n<p><strong>本文参考自</strong></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/History_API\">https://developer.mozilla.org/zh-CN/docs/Web/API/History_API</a></li>\n<li><a href=\"https://juejin.im/post/5c2708cd6fb9a049f06a5744\">https://juejin.im/post/5c2708cd6fb9a049f06a5744</a></li>\n</ul>","fields":{"slug":"/javascript/js_1/"},"frontmatter":{"title":"页面跳转相关","date":"2020-01-13","thumbnail":"javascript/index.png"}}},{"node":{"html":"<h3 id=\"table-of-contents\">Table of Contents</h3>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#1-%E7%AE%80%E4%BB%8B\">1. 简介</a></li>\n<li><a href=\"#2-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\">2. 基本用法</a></li>\n<li><a href=\"#3-%E5%AE%9E%E4%BE%8B\">3. 实例</a></li>\n<li><a href=\"#4-api\">4. API</a></li>\n</ul>\n</div>\n<hr>\n<h2 id=\"1-简介\">1. 简介</h2>\n<hr>\n<p>由于 JavsScript 是单线程的，所有任务只能在一个线程上完成，如果前面的任务没完成，后面的任务只能等着。而利用 Web Worker 可以创建多线程环境，将任务放在 worker 里面执行，这样可以减少主线程负担，不会被阻塞或拖慢。</p>\n<p>Web Worker 有一下几个使用的注意点：</p>\n<ol>\n<li>\n<p>同源选择</p>\n<p>分配给 Worker 线程运行的脚本文件必须与主线程的脚本文件同源</p>\n</li>\n<li>\n<p>DOM 限制</p>\n<p>Worker 线程所在的全局对象与主线程不一样，无法读取主线程所在网页的 DOM 对象，无法使用 document、window、parent 对象。 但是，Worker 线程可以使用 navigator 对象和 location 对象。</p>\n</li>\n<li>\n<p>通信联系</p>\n<p>Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p>\n</li>\n<li>\n<p>脚本限制</p>\n<p>Worker 线程不能执行 alert() 和 confirm() 方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</p>\n</li>\n<li>\n<p>文本限制</p>\n<p>Worker 线程无法读取本地文件，即不能打开本机的文件系统(file://)，他所加载的脚本必须来自网络。</p>\n</li>\n</ol>\n<h2 id=\"2-基本用法\">2. 基本用法</h2>\n<hr>\n<p><strong>2.1 主线程</strong></p>\n<p>使用 express 搭建，创建 worker.js 文件与 main.js 文件</p>\n<p><strong>main.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/javascripts/worker.js'</span><span class=\"token punctuation\">)</span>\n\n  worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'来自 worker:'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 关闭 worker</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>worker.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'来自主线程：'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'收到！我是 worker！'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// self 和 this 代表子线程自身，即子线程的全局对象</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this or self'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'location'</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">)</span></code></pre></div>\n<p>可看到它们进行通信了：</p>\n<p><img src=\"/blogs/javascript/js_2_pic_1.png#pic_center\" alt=\"pic_1\"></p>\n<p><strong>2.2 Worker 线程</strong></p>\n<p>可以为 Worker 添加监听函数，这样可以根据主线程发来的数据，在 Worker 线程里调用不同的方法。</p>\n<p>下面是一个例子：</p>\n<p><strong>worker.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'start'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> 好的, 已开启</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'stop'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> 好的, 正在关闭</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 关闭 worker</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> 抱歉, 我听不懂</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>main.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/javascripts/worker.js'</span><span class=\"token punctuation\">)</span>\n\n  worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> cmd<span class=\"token operator\">:</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span> msg<span class=\"token operator\">:</span> <span class=\"token string\">'worker 快开启'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n  worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> cmd<span class=\"token operator\">:</span> <span class=\"token string\">'please'</span><span class=\"token punctuation\">,</span> msg<span class=\"token operator\">:</span> <span class=\"token string\">'worker 倒杯水'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> cmd<span class=\"token operator\">:</span> <span class=\"token string\">'stop'</span><span class=\"token punctuation\">,</span> msg<span class=\"token operator\">:</span> <span class=\"token string\">'退下吧 worker'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  worker<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以看到 Worker 根据主线程发来的不同的命令调用对应的方法：</p>\n<p><img src=\"/blogs/javascript/js_2_pic_2.png#pic_center\" alt=\"pic_2\"></p>\n<p><strong>2.3 Worker 加载脚本</strong></p>\n<p>Worker 内部如果要加载其他脚本，有一个专门的方法 <strong>importScripts()</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">importScripts</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script1.js'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 同时加载多个脚本</span>\n  <span class=\"token function\">importScripts</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script1.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'script2.js'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>2.4 错误处理</strong></p>\n<p>主线程可以监听 Worker 是否发生错误，如果发生错误 Worker 会触发主线程的 error 事件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  worker<span class=\"token punctuation\">.</span><span class=\"token function\">onerror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'ERROR: Line '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>lineno<span class=\"token punctuation\">,</span> <span class=\"token string\">' in '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">': '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>message\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 或者</span>\n  worker<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Worker 内部也可以监听 <strong>error</strong> 事件</p>\n<p><strong>2.5 关闭 Worker</strong></p>\n<p>为了节省资源，使用完毕后记得关闭 Worker</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 主线程</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// worker 线程</span>\nself<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"3-实例\">3. 实例</h2>\n<hr>\n<p><strong>3.1 Worker 线程完成轮询</strong></p>\n<p>某种情况下，浏览器需要轮询服务器状态，以便第一时间得知状态改变，这个工作可以放在 Worker 里面。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">createWorker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'('</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">')()'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> worker<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> pollingWorker <span class=\"token operator\">=</span> <span class=\"token function\">createWorker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> cache<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span> old</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/my-api-endpoint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          cache <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n          self<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  pollingWorker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// render data</span>\n  <span class=\"token punctuation\">}</span>\n\n  pollingWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'init'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Worker 每秒钟轮询一次数据，然后跟缓存对比，如果不一致，说明服务端有了新的变化，因此就要通知主线程了。</p>\n<p><strong>3.2 Worker 新建 Worker</strong></p>\n<p>Worker 线程内部还能再新建 Worker 线程(目前只有 Firefox 浏览器支持)。下面的例子是将一个计算密集的任务分配到 10 个 Worker.</p>\n<p><strong>主线程代码</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'worker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Worker 线程代码</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// worker.js</span>\n\n  <span class=\"token comment\">// settings</span>\n  <span class=\"token keyword\">var</span> num_workers <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> items_per_worker <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// start the workers</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> pending_workers <span class=\"token operator\">=</span> num_workers<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num_workers<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'core.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> items_per_worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> items_per_worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    worker<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> storeResult<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// handle the results</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">storeResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    pending_workers <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pending_workers <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// finished!</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面代码中，Worker 线程内部新建了10个 Worker 线程，并且依次向这10个 Worker 发送消息，告知了计算的起点和终点。计算任务脚本的代码如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// core.js</span>\n  <span class=\"token keyword\">var</span> start<span class=\"token punctuation\">;</span>\n  onmessage <span class=\"token operator\">=</span> getStart<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getStart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    start <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    onmessage <span class=\"token operator\">=</span> getEnd<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> end<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    end <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    onmessage <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// perform some complex calculation here</span>\n      result <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"4-api\">4. API</h2>\n<p><strong>4.1 主线程</strong></p>\n<p>浏览器原生提供 <strong>Worker()</strong> 构造函数，用来供主线程生成 Worker 线程。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>jsUrl<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Worker()</strong> 构造函数，可以接受两个参数。第一个参数是脚本的网址（必须遵守同源政策），该参数是必需的，且只能加载 JS 脚本，否则会报错。第二个参数是配置对象，该对象可选。它的一个作用就是指定 Worker 的名称，用来区分多个 Worker 线程。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 主线程</span>\n<span class=\"token keyword\">var</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'worker.js'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'myWorker'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Worker 线程</span>\nself<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// myWorker</span></code></pre></div>\n<p><strong>Worker()</strong> 构造函数返回一个 Worker 线程对象，用来供主线程操作 Worker。Worker 线程对象的属性和方法如下。</p>\n<ul>\n<li>Worker.onerror：指定 error 事件的监听函数。</li>\n<li>Worker.onmessage：指定 message 事件的监听函数，发送过来的数据在Event.data属性中。</li>\n<li>Worker.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。</li>\n<li>Worker.postMessage()：向 Worker 线程发送消息。</li>\n<li>Worker.terminate()：立即终止 Worker 线程。</li>\n</ul>\n<p><strong>4.2 Worker 线程</strong></p>\n<p>Web Worker 有自己的全局对象，不是主线程的 <strong>window</strong>，而是一个专门为 Worker 定制的全局对象。因此定义在 <strong>window</strong> 上面的对象和方法不是全部都可以使用。</p>\n<p>Worker 线程有一些自己的全局属性和方法。</p>\n<ul>\n<li>self.name： Worker 的名字。该属性只读，由构造函数指定。</li>\n<li>self.onmessage：指定message事件的监听函数。</li>\n<li>self.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。</li>\n<li>self.close()：关闭 Worker 线程。</li>\n<li>self.postMessage()：向产生这个 Worker 线程发送消息。</li>\n<li>self.importScripts()：加载 JS 脚本。</li>\n</ul>\n<hr>\n<p><strong>转载自: <a href=\"http://www.ruanyifeng.com/blog/2018/07/web-worker.html\">http://www.ruanyifeng.com/blog/2018/07/web-worker.html</a></strong></p>","fields":{"slug":"/javascript/js_2/"},"frontmatter":{"title":"Web Worker","date":"2020-06-18","thumbnail":"javascript/index.png"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"base":"/javascript/"}}}