{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/interview-javascript/js_2/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"/Users/zhengjinyang/Documents/study/R-AS.github.io/src/pages/blogs/interview-javascript/js_2.md","html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#prototype\">prototype</a></li>\n<li><a href=\"#proto\"><strong>proto</strong></a></li>\n<li><a href=\"#constructor\">constructor</a></li>\n<li><a href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE\">原型链</a></li>\n</ul>\n</div>\n<h4 id=\"prototype\">prototype</h4>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"5826046731611822000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`function Person() {\n\n}\nPerson.prototype.name = 'Kevin'\nconst person1 = new Person()\nconst person2 = new Person()\nconsole.log(person1.name) // Kevin\nconsole.log(person2.name) // Kevin`, `5826046731611822000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Person</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">Person</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;Kevin&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">person1</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">person2</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">person1</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// Kevin</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">person2</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// Kevin</span></span></code></pre>\n<p>每个函数都有一个 prototype 属性，prototype 指向一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的 person1 和 person2 的原型。</p>\n<p>以下表示构造函数与实例原型之间的关系：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"79257777411661190000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`Person ----prototype--->Person.prototype\n(构造函数)                (实例原型)`, `79257777411661190000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"txt\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">Person ----prototype---&gt;Person.prototype</span>\n<span class=\"grvsc-line\">(构造函数)                (实例原型)</span></code></pre>\n<hr>\n<h4 id=\"proto\">proto</h4>\n<p>每个 js 对象(除了 null)都具有一个属性，就是 <strong>proto</strong>，这个属性会指向该对象的原型。</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">function Person() {</span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\">}</span>\n<span class=\"grvsc-line\">const person = new Person()</span>\n<span class=\"grvsc-line\">console.log(person.__proto__ === Person.prototype) // true</span></code></pre>\n<p>以下表示实例与实例原型的关系：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"27133256265761750000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`Person ----prototype--->Person.prototype\n(构造函数)                (实例原型)\n  |                         ⬆\n  |                         |\n  |                         |\nperson ---- __proto__ -------`, `27133256265761750000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"txt\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">Person ----prototype---&gt;Person.prototype</span>\n<span class=\"grvsc-line\">(构造函数)                (实例原型)</span>\n<span class=\"grvsc-line\">  |                         ⬆</span>\n<span class=\"grvsc-line\">  |                         |</span>\n<span class=\"grvsc-line\">  |                         |</span>\n<span class=\"grvsc-line\">person ---- __proto__ -------</span></code></pre>\n<hr>\n<h4 id=\"constructor\">constructor</h4>\n<p>每个原型都有一个 constructor 属性指向关联的构造函数。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"70877256751228510000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`function Person() {\n\n}\n\nvar person = new Person()\n\nconsole.log(person.__proto__ == Person.prototype) // true\nconsole.log(Person.prototype.constructor == Person) // true\n// 顺便学习一个ES5的方法,可以获得对象的原型\nconsole.log(Object.getPrototypeOf(person) === Person.prototype) // true`, `70877256751228510000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Person</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">person</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">person</span><span class=\"mtk1\">.</span><span class=\"mtk12\">__proto__</span><span class=\"mtk1\"> == </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// true</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Person</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk12\">constructor</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">Person</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// true</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 顺便学习一个ES5的方法,可以获得对象的原型</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getPrototypeOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">person</span><span class=\"mtk1\">) === </span><span class=\"mtk10\">Person</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// true</span></span></code></pre>\n<p>更新关系图：</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"26818736858608493000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`Person ----prototype--->Person.prototype\n(构造函数)<--constructor---(实例原型)\n  |                         ⬆\n  |                         |\n  |                         |\nperson ---- __proto__ -------`, `26818736858608493000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"txt\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">Person ----prototype---&gt;Person.prototype</span>\n<span class=\"grvsc-line\">(构造函数)&lt;--constructor---(实例原型)</span>\n<span class=\"grvsc-line\">  |                         ⬆</span>\n<span class=\"grvsc-line\">  |                         |</span>\n<span class=\"grvsc-line\">  |                         |</span>\n<span class=\"grvsc-line\">person ---- __proto__ -------</span></code></pre>\n<hr>\n<h4 id=\"原型链\">原型链</h4>\n<p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还找不到，就去找原型的原型，一直找到最顶层为止。这样形成的链条就是原型链。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"21496185977996450000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`Person ----prototype--->Person.prototype\n(构造函数)<--constructor---(实例原型)\n  |                         ⬆  ｜\n  |                         |   ｜\n  |                         |   ｜\nperson ---- __proto__ -------   ｜\n                                ｜ __proto__ \n                                ｜\n                                ⬇\nObject() ----prototype--->Object.prototype\n(构造函数)<--constructor---(实例原型)\n                                ｜\n                                ｜ __proto__ \n                                ⬇\n                                null`, `21496185977996450000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"txt\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">Person ----prototype---&gt;Person.prototype</span>\n<span class=\"grvsc-line\">(构造函数)&lt;--constructor---(实例原型)</span>\n<span class=\"grvsc-line\">  |                         ⬆  ｜</span>\n<span class=\"grvsc-line\">  |                         |   ｜</span>\n<span class=\"grvsc-line\">  |                         |   ｜</span>\n<span class=\"grvsc-line\">person ---- __proto__ -------   ｜</span>\n<span class=\"grvsc-line\">                                ｜ __proto__ </span>\n<span class=\"grvsc-line\">                                ｜</span>\n<span class=\"grvsc-line\">                                ⬇</span>\n<span class=\"grvsc-line\">Object() ----prototype---&gt;Object.prototype</span>\n<span class=\"grvsc-line\">(构造函数)&lt;--constructor---(实例原型)</span>\n<span class=\"grvsc-line\">                                ｜</span>\n<span class=\"grvsc-line\">                                ｜ __proto__ </span>\n<span class=\"grvsc-line\">                                ⬇</span>\n<span class=\"grvsc-line\">                                null</span></code></pre>\n<hr>\n<p><strong>摘抄自</strong></p>\n<ul>\n<li><a href=\"https://github.com/mqyqingfeng/Blog/issues/2\">JavaScript深入之从原型到原型链</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n</style>","frontmatter":{"title":"JS 原型链","date":"2022-11-03","type":"interview-javascript"},"excerpt":"prototype proto constructor 原型链prototype 每个函数都有一个 prototype 属性，prototype 指向一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的 person1 和 person…","fields":{"readingTime":{"text":"3 min read"}}},"allDirectory":{"totalCount":14,"edges":[{"node":{"base":"css"}},{"node":{"base":"frontend"}},{"node":{"base":"interview-css"}},{"node":{"base":"interview-javascript"}},{"node":{"base":"interview-浏览器"}},{"node":{"base":"interview-计算机基础"}},{"node":{"base":"javascript"}},{"node":{"base":"nodejs"}},{"node":{"base":"react"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"typescript"}},{"node":{"base":"vue"}},{"node":{"base":"小程序"}},{"node":{"base":"科普"}}]}},"pageContext":{"slug":"/interview-javascript/js_2/"}},"staticQueryHashes":["1487620982","3141419394","3649515864"]}