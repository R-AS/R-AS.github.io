{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/interview-javascript/js_9/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"/Users/zhengjinyang/Documents/study/R-AS.github.io/src/pages/blogs/interview-javascript/js_9.md","html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-eventemitter\">什么是 EventEmitter？</a></li>\n<li><a href=\"#eventemitter-%E5%AE%9E%E7%8E%B0\">EventEmitter 实现</a></li>\n</ul>\n</div>\n<hr>\n<h4 id=\"什么是-eventemitter\">什么是 EventEmitter？</h4>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"79791190637817360000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`        观察者\n         ｜\n -----------------\n｜       ｜       ｜\n订阅者   订阅者   订阅者`, `79791190637817360000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"txt\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">        观察者</span>\n<span class=\"grvsc-line\">         ｜</span>\n<span class=\"grvsc-line\"> -----------------</span>\n<span class=\"grvsc-line\">｜       ｜       ｜</span>\n<span class=\"grvsc-line\">订阅者   订阅者   订阅者</span></code></pre>\n<p>EventEmitter 是典型的观察者模式，在 Nodejs 中，EventEmitter 的核心就是事件触发与事件监听器功能的封装。</p>\n<p>其 API 有：</p>\n<ul>\n<li>\n<p>addListener(event, listener)</p>\n<blockquote>\n<p>为指定事件添加一个监听器，默认添加到监听器数组的尾部。</p>\n</blockquote>\n</li>\n<li>\n<p>removeListener(event, listener)</p>\n<blockquote>\n<p>移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。它接受两个参数，第一个是事件名称，第二个是回调函数名称。</p>\n</blockquote>\n</li>\n<li>\n<p>setMaxListeners(n)</p>\n<blockquote>\n<p>默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。</p>\n</blockquote>\n</li>\n<li>\n<p>once(event, listener)</p>\n<blockquote>\n<p>为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。</p>\n</blockquote>\n</li>\n<li>\n<p>emit(event, [arg1], [arg2], [...])</p>\n<blockquote>\n<p>按监听器的顺序执行执行每个监听器，如果事件有注册监听返回 true，否则返回 false。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h4 id=\"eventemitter-实现\">EventEmitter 实现</h4>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"74301974433444820000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`function EventEmitter() {\n  this._maxListeners = 10\n  this._events = Object.create(null) \n}\n\n// 向事件队列添加事件\n// prepend 为 true 表示向事件队列头部添加事件\nEventEmitter.prototype.addListener = function(type, listener, prepend) {\n  if (!this._events) {\n    this._events = Object.create(null)\n  }\n  if (this._events[type]) {\n    if (prepend) {\n      this._events[type].unshift(listener)\n    } else {\n       this._events[type].push(listener)\n    }\n  } else {\n    this._events[type] = [listener]\n  }\n}\n\n// 移除某个事件\nEventEmitter.prototype.removeListener = function(type, listener) {\n  if (Array.isArray(this._events[type])) {\n    if (!listener) {\n      delete this._events[type]\n    } else {\n      this._events[type] = this._events[type].filter(e => e !== listener && e.origin !== listener)\n    }\n  }\n}\n\n// 向事件队列添加事件，只执行一次\nEventEmitter.prototype.once = function(type, listener) {\n  const only = (...args) => {\n    listener.apply(this, args)\n    this.removeListener(type, listener)\n  }\n  only.origin = listener\n  this.addListener(type, only)\n}\n\n// 执行某类事件\nEventEmitter.prototype.emit = function(type, ...args) {\n  if (Array.isArray(this._events[type])) {\n    this._events[type].forEach(e => {\n      e.apply(this, args)\n    })\n  }\n}\n\n// 设置最大事件监听个数\nEventEmitter.prototype.setMaxListeners = function(count) {\n  this._maxListeners = count\n}`, `74301974433444820000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">EventEmitter</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_maxListeners</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">create</span><span class=\"mtk1\">(</span><span class=\"mtk4\">null</span><span class=\"mtk1\">) </span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 向事件队列添加事件</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// prepend 为 true 表示向事件队列头部添加事件</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">EventEmitter</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk11\">addListener</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">type</span><span class=\"mtk1\">, </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">, </span><span class=\"mtk12\">prepend</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">create</span><span class=\"mtk1\">(</span><span class=\"mtk4\">null</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">]) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">prepend</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">].</span><span class=\"mtk11\">unshift</span><span class=\"mtk1\">(</span><span class=\"mtk12\">listener</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">       </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">].</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk12\">listener</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">] = [</span><span class=\"mtk12\">listener</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 移除某个事件</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">EventEmitter</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk11\">removeListener</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">type</span><span class=\"mtk1\">, </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">Array</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isArray</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">])) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">listener</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">].</span><span class=\"mtk11\">filter</span><span class=\"mtk1\">(</span><span class=\"mtk12\">e</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\"> !== </span><span class=\"mtk12\">listener</span><span class=\"mtk1\"> && </span><span class=\"mtk12\">e</span><span class=\"mtk1\">.</span><span class=\"mtk12\">origin</span><span class=\"mtk1\"> !== </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 向事件队列添加事件，只执行一次</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">EventEmitter</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk11\">once</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">type</span><span class=\"mtk1\">, </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">only</span><span class=\"mtk1\"> = (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk12\">args</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">removeListener</span><span class=\"mtk1\">(</span><span class=\"mtk12\">type</span><span class=\"mtk1\">, </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">only</span><span class=\"mtk1\">.</span><span class=\"mtk12\">origin</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">listener</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">addListener</span><span class=\"mtk1\">(</span><span class=\"mtk12\">type</span><span class=\"mtk1\">, </span><span class=\"mtk12\">only</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 执行某类事件</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">EventEmitter</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk11\">emit</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">type</span><span class=\"mtk1\">, ...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">Array</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isArray</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">])) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_events</span><span class=\"mtk1\">[</span><span class=\"mtk12\">type</span><span class=\"mtk1\">].</span><span class=\"mtk11\">forEach</span><span class=\"mtk1\">(</span><span class=\"mtk12\">e</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">e</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk12\">args</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    })</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 设置最大事件监听个数</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">EventEmitter</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prototype</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setMaxListeners</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">count</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_maxListeners</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">count</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><strong>代码测试：</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"49173439275007390000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`const emitter = new EventEmitter()\n\nconst onceListener = function (args) {\n  console.log('我只能被执行一次', args, this)\n}\n\nconst listener = function (args) {\n  console.log('我是一个listener', args, this)\n}\n\nemitter.once('click', onceListener)\nemitter.addListener('click', listener)\n\nemitter.emit('click', '参数')\nemitter.emit('click')\n\nemitter.removeListener('click', listener)\nemitter.emit('click')`, `49173439275007390000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">emitter</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">EventEmitter</span><span class=\"mtk1\">()</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onceListener</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">args</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;我只能被执行一次&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">args</span><span class=\"mtk1\">, </span><span class=\"mtk4\">this</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">listener</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">args</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;我是一个listener&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">args</span><span class=\"mtk1\">, </span><span class=\"mtk4\">this</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">emitter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">once</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;click&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">onceListener</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">emitter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">addListener</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;click&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">emitter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">emit</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;click&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;参数&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">emitter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">emit</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;click&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">emitter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">removeListener</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;click&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">emitter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">emit</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;click&#39;</span><span class=\"mtk1\">)</span></span></code></pre>\n<hr>\n<p><strong>摘抄自</strong></p>\n<ul>\n<li><a href=\"https://www.conardli.top/docs/javascript/eventemitter.html\">EventEmitter</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n</style>","frontmatter":{"title":"EventEmitter 实现","date":"2022-12-05","type":"interview-javascript"},"excerpt":"什么是 EventEmitter？ EventEmitter 实现什么是 EventEmitter？ EventEmitter 是典型的观察者模式，在 Nodejs 中，EventEmitter 的核心就是事件触发与事件监听器功能的封装。 其 API 有： addListener…","fields":{"readingTime":{"text":"3 min read"}}},"allDirectory":{"totalCount":14,"edges":[{"node":{"base":"css"}},{"node":{"base":"frontend"}},{"node":{"base":"interview-css"}},{"node":{"base":"interview-javascript"}},{"node":{"base":"interview-浏览器"}},{"node":{"base":"interview-计算机基础"}},{"node":{"base":"javascript"}},{"node":{"base":"nodejs"}},{"node":{"base":"react"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"typescript"}},{"node":{"base":"vue"}},{"node":{"base":"小程序"}},{"node":{"base":"科普"}}]}},"pageContext":{"slug":"/interview-javascript/js_9/"}},"staticQueryHashes":["1487620982","3141419394","3649515864"]}