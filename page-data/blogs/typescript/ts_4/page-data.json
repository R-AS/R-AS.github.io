{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/typescript/ts_4/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"/Users/zhengjinyang/Documents/study/R-AS.github.io/src/pages/blogs/typescript/ts_4.md","html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\">函数重载</a></li>\n<li><a href=\"#thistype\">ThisType</a></li>\n<li><a href=\"#%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B\">字面量类型</a></li>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B\">泛型</a></li>\n<li><a href=\"#infer\">infer</a></li>\n</ul>\n</div>\n<hr>\n<h3 id=\"函数重载\">函数重载</h3>\n<p>当因函数参数不同而返回不同类型的场景时, 可以使用函数重载, 为同一个函数定义多个类型即可, 如下所示:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"51790781997334240000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`declare function test(a: number): number\ndeclare function test(a: string): string\n\nconst resS = test('Hello World') // res 被推断出类型为 string\nconst resN = test(1234) // res 被推断出类型为 number`, `51790781997334240000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">declare</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk12\">a</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">): </span><span class=\"mtk10\">number</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">declare</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk12\">a</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">): </span><span class=\"mtk10\">string</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">resS</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;Hello World&#39;</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// res 被推断出类型为 string</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">resN</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1234</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// res 被推断出类型为 number</span></span></code></pre>\n<p>当我们需要遇到以下场景时可以利用函数重载来实现：</p>\n<p><strong>假设函数 test(p, f), 当 p 的类型为 User 时, 不允许输入参数 f, 当 p 为 number 时, 允许输入参数 f</strong></p>\n<p>代码如下:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"24336975886548620000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`interface User {\n  name: string\n  age: number\n}\n\ndeclare function test(p: User): number\ndeclare function test(p: number, f: boolean): number\n\nconst user = {\n  name: 'Jack',\n  age: 666,\n}\n\nconst res = test(user, false) // Argument of type '{ name: string; age: number; }' is not assignable to parameter of type 'number'.`, `24336975886548620000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">User</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">name</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">age</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">declare</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">: </span><span class=\"mtk10\">User</span><span class=\"mtk1\">): </span><span class=\"mtk10\">number</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">declare</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">, </span><span class=\"mtk12\">f</span><span class=\"mtk1\">: </span><span class=\"mtk10\">boolean</span><span class=\"mtk1\">): </span><span class=\"mtk10\">number</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">name:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;Jack&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">age:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">666</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">res</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// Argument of type &#39;{ name: string; age: number; }&#39; is not assignable to parameter of type &#39;number&#39;.</span></span></code></pre>\n<hr>\n<h3 id=\"thistype\">ThisType</h3>\n<p>通过 ThisType 我们可以在对象字面量中键入 this, 并提供通过上下文类型控制 this 类型的便捷方式。<strong>它只有在 --noImplicitThis 的选项下才有效。</strong> 例如:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"80314880202710840000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// Compile with --noImplicitThis\n\ntype Point = {\n  x: number\n  y: number\n  moveBy(dx: number, dy: number): void\n}\n\nlet p: Point = {\n  x: 10,\n  y: 20,\n  moveBy(dx, dy) {\n    this.x += dx // this has type Point\n    this.y += dy // this has type Point\n  }\n}\n\n// 如果方法由带 this 参数的签名进行上下文键入, 那么 this 具有该参数的类型, 如下:\nlet foo = {\n  x: 'hello',\n  f(n: number) {\n    this // { x: string, f(n: number): void }\n  },\n}\n\n// 如果方法显式指定了 this 参数, 那么 this 具有该参数的类型, 如下:\nlet bar = {\n  x: 'hello',\n  f(this: { message: string }) {\n    this // { message: string }\n  }\n}`, `80314880202710840000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// Compile with --noImplicitThis</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Point</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">x</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">y</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">moveBy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dx</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">, </span><span class=\"mtk12\">dy</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">): </span><span class=\"mtk10\">void</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">p</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Point</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">x:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">10</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">y:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">20</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">moveBy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dx</span><span class=\"mtk1\">, </span><span class=\"mtk12\">dy</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">dx</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// this has type Point</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">y</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">dy</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// this has type Point</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 如果方法由带 this 参数的签名进行上下文键入, 那么 this 具有该参数的类型, 如下:</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">foo</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">x:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;hello&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">f</span><span class=\"mtk1\">(</span><span class=\"mtk12\">n</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// { x: string, f(n: number): void }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// 如果方法显式指定了 this 参数, 那么 this 具有该参数的类型, 如下:</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bar</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">x:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;hello&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">f</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">: { </span><span class=\"mtk12\">message</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> }) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// { message: string }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>类似的方式, 当使用 --noImplicitThis 时, 函数表达式赋值给 obj.xxx 或者 obj[xxx] 的目标时, 在函数中 this 的类型将会是 obj:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"10219608712884476000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// Compile with --noImplicitThis\n\nobj.f = function(n) {\n  return this.x - n // 'this' has same type as 'obj'\n}\n\nobj['f'] = function(n) {\n  return this.x - n // 'this' has same type as 'obj'\n}`, `10219608712884476000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// Compile with --noImplicitThis</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk11\">f</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">n</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">n</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// &#39;this&#39; has same type as &#39;obj&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">obj</span><span class=\"mtk1\">[</span><span class=\"mtk8\">&#39;f&#39;</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">function</span><span class=\"mtk1\">(</span><span class=\"mtk12\">n</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">n</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// &#39;this&#39; has same type as &#39;obj&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>通过 API 转换参数的形式来生成 this 的值的情境下, 可以通过创建一个新的 ThisType<T> 标记接口, 可用于在上下文中表明转换后的类型。尤其是当字面量中的上下文类型为 ThisType<T> 或者是包含 ThisType<T> 的交集时, 显得尤为有效, 对象字面量方法中 this 的类型即为 T。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"70059137275383530000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`// Compile with --noImplicitThis\n\ntype ObjectDescriptor<D, M> = {\n  data?: D\n  methods?: M & ThisType<D & M> // Type of 'this' in methods is D & M\n}\n\nfunction makeObject<D, M>(desc: ObjectDescriptor<D, M>): D & M {\n  let data: object = desc.data || {}\n  let methods: object = desc.methods || {}\n  return { ...data, ...methods } as D & M\n}\n\nlet obj = makeObject({\n  data: { x: 0, y: 0 },\n  methods: {\n    moveBy(dx: number, dy: number) {\n      this.x += dx // Strongly typed this\n      this.y += dy // Strongly typed this\n    }\n  }\n})\n\nobj.x = 10\nobj.y = 20\nobj.moveBy(5, 5)`, `70059137275383530000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// Compile with --noImplicitThis</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ObjectDescriptor</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">D</span><span class=\"mtk1\">, </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt; = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data</span><span class=\"mtk1\">?: </span><span class=\"mtk10\">D</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">methods</span><span class=\"mtk1\">?: </span><span class=\"mtk10\">M</span><span class=\"mtk1\"> & </span><span class=\"mtk10\">ThisType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">D</span><span class=\"mtk1\"> & </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt; </span><span class=\"mtk3\">// Type of &#39;this&#39; in methods is D & M</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">makeObject</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">D</span><span class=\"mtk1\">, </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">desc</span><span class=\"mtk1\">: </span><span class=\"mtk10\">ObjectDescriptor</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">D</span><span class=\"mtk1\">, </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt;): </span><span class=\"mtk10\">D</span><span class=\"mtk1\"> & </span><span class=\"mtk10\">M</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk10\">object</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">desc</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\"> || {}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">methods</span><span class=\"mtk1\">: </span><span class=\"mtk10\">object</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">desc</span><span class=\"mtk1\">.</span><span class=\"mtk12\">methods</span><span class=\"mtk1\"> || {}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> { ...</span><span class=\"mtk12\">data</span><span class=\"mtk1\">, ...</span><span class=\"mtk12\">methods</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">as</span><span class=\"mtk1\"> </span><span class=\"mtk10\">D</span><span class=\"mtk1\"> & </span><span class=\"mtk10\">M</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">obj</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">makeObject</span><span class=\"mtk1\">({</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data:</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">x:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">y:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">methods:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">moveBy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dx</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">, </span><span class=\"mtk12\">dy</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">dx</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// Strongly typed this</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">y</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">dy</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// Strongly typed this</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk12\">y</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">20</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk11\">moveBy</span><span class=\"mtk1\">(</span><span class=\"mtk7\">5</span><span class=\"mtk1\">, </span><span class=\"mtk7\">5</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>如果 --noImplicitThis 选项已经启用, 并且对象字面量中包含由 ThisType<T> 键入的上下文类型, 那么 this 的类型为 T(如果不包含由 ThisType<T> 键入的上下文类型, 那么 this 的类型为该上下文类型)。</p>\n<p>在上面的例子中, makeObject 参数中的对象属性 methods 具有包含 ThisType&#x3C;D &#x26; M> 的上下文类型, 因此对象中 methods 属性下的方法的 this 类型为 { x: number, y: number } &#x26; { moveBy(dx: number, dy: number): number }</p>\n<hr>\n<h3 id=\"字面量类型\">字面量类型</h3>\n<p>在 JS 基础上, TS 扩展了一系列字面量类型, 用来确保类型的准确性。</p>\n<p>如下:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"9999307287399195000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`const a = 'hello' // const a: &quot;hello&quot;\na = 'world' // Error`, `9999307287399195000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;hello&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// const a: &quot;hello&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;world&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// Error</span></span></code></pre>\n<p>以上代码中, 因为 a 是常量, a 被判断的类型是 hello, 可以理解成以下代码:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"24207503684765100000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`let a: 'hello' = 'hello'\na = 'world' // Error`, `24207503684765100000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">: </span><span class=\"mtk8\">&#39;hello&#39;</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;hello&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;world&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// Error</span></span></code></pre>\n<p><strong>对象字面量类型</strong></p>\n<p>对于对象字面量的类型, TS 有一个被称之为 <strong>Freshness</strong> 的概念, 它也被称为更严格的对象字面量检查, 如下例子:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"54616900518917900000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`let someThing: { name: string }\nsomeThing = { name: 'hello' } // ok\nsomeThing = { name: 'hello', age: 123 } // Type '{ name: string; age: number; }' is not assignable to type '{ name: string; }'.Object literal may only specify known properties, and 'age' does not exist in type '{ name: string; }'.\nlet otherThing = { name: 'hello', age: 123 }\nsomeThing = otherThing`, `54616900518917900000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">someThing</span><span class=\"mtk1\">: { </span><span class=\"mtk12\">name</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">someThing</span><span class=\"mtk1\"> = { </span><span class=\"mtk12\">name:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;hello&#39;</span><span class=\"mtk1\"> } </span><span class=\"mtk3\">// ok</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">someThing</span><span class=\"mtk1\"> = { </span><span class=\"mtk12\">name:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;hello&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">age:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">123</span><span class=\"mtk1\"> } </span><span class=\"mtk3\">// Type &#39;{ name: string; age: number; }&#39; is not assignable to type &#39;{ name: string; }&#39;.Object literal may only specify known properties, and &#39;age&#39; does not exist in type &#39;{ name: string; }&#39;.</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">otherThing</span><span class=\"mtk1\"> = { </span><span class=\"mtk12\">name:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;hello&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">age:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">123</span><span class=\"mtk1\"> }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">someThing</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">otherThing</span></span></code></pre>\n<p>TS 任务创建的每个对象字面量都是<strong>fresh</strong>状态, 当一个 <strong>fresh</strong> 对象字面量赋值给一个变量时, 如果对象的类型与变量类型不兼容时, 会出现报错(如上例子中 <strong>someThing = { name: 'hello', age: 123 }</strong> 的错误)。当对象字面量的类型变宽, 对象字面量的 <strong>fresh</strong> 状态会消失(如上例子中 <strong>someThing = otherThing</strong>), 赋值以后, <strong>someThing 的类型变宽</strong>。</p>\n<hr>\n<h3 id=\"泛型\">泛型</h3>\n<p>泛型的使用有两种, 一种是传入泛型类型, 另一种是使用类型判断, 即编译器根据其他参数类型来判断泛型类型。如下:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"18538184154828087000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`declare function fn<T>(arg: T): T\nconst fn1 = fn<string>('hello') // 传入泛型类型 string\nconst fn2 = fn(1) // 编译器根据参数来判断泛型类型`, `18538184154828087000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">declare</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">fn</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">arg</span><span class=\"mtk1\">: </span><span class=\"mtk10\">T</span><span class=\"mtk1\">): </span><span class=\"mtk10\">T</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fn1</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">fn</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">string</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk8\">&#39;hello&#39;</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// 传入泛型类型 string</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fn2</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">fn</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// 编译器根据参数来判断泛型类型</span></span></code></pre>\n<p><strong>实现 Vue Type</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"42241558829786374000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`type Options<T> = {\n  [P in keyof T]: T[P]\n}\ndeclare function test<T>(o: Options<T>): T\ntest({ name: 'Hello' }).name // string`, `42241558829786374000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Options</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt; = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  [</span><span class=\"mtk10\">P</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk4\">keyof</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">]: </span><span class=\"mtk10\">T</span><span class=\"mtk1\">[</span><span class=\"mtk10\">P</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">declare</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">o</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Options</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;): </span><span class=\"mtk10\">T</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk11\">test</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">name</span><span class=\"mtk1\">: </span><span class=\"mtk8\">&#39;Hello&#39;</span><span class=\"mtk1\"> }).</span><span class=\"mtk11\">name</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// string</span></span></code></pre>\n<p>test 函数将传入参数的所有属性取出来, 现在我们来一步一步加工, 实现想要的功能。</p>\n<p>首先, 更改传入参数的形式, 由 <strong>{ name: 'Hello' }</strong> 的形式变更为 <strong>{ data: { name: 'Hello' } }</strong>, 调用函数的返回值类型不变, 即 <strong>test({ data: { name: 'Hello' } })</strong> name 的值也是 string 类型。</p>\n<p>这并不复杂, 这只需要把传入参数的 data 类型设置为 T 即可:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"53930756881604580000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`declare function test<T>(o: { data: Options<T> }): T\ntest({ data: { name: 'Hello' } }).name // string`, `53930756881604580000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">declare</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">o</span><span class=\"mtk1\">: { </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Options</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt; }): </span><span class=\"mtk10\">T</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk11\">test</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: { </span><span class=\"mtk12\">name</span><span class=\"mtk1\">: </span><span class=\"mtk8\">&#39;Hello&#39;</span><span class=\"mtk1\"> } }).</span><span class=\"mtk11\">name</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// string</span></span></code></pre>\n<p>接着, 考虑一种特殊的函数情景, 像 Vue 中 Computed 一样, 不调用函数, 也能取出函数的返回值类型。现在传入参数的形式变更为:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"213013902345649000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`const params = {\n  data: {\n    name: 'Hello',\n  },\n  computed: {\n    age() {\n      return 20\n    }\n  }\n}`, `213013902345649000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">name:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;Hello&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">computed:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">age</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">20</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>一个函数的类型可以简单的看成是 () => T 的形式, 对象中的方法类型, 可以看成 a: () => T 的形式, 在反向推导时（由函数返回值, 来推断类型 a 的类型）, 可以利用它, 现在, 需要添加一个映射类型 Computed<T>, 用来处理 computed 里的函数:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"89058308741110000000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`type Options<T> = {\n  [P in keyof T]: T[P]\n}\ntype Computed<T> = {\n  [P in keyof T]: () => T[P]\n}\n\ninterface Params<T, M> {\n  data: Options<T>\n  computed: Computed<M>\n}\n\ndeclare function test<T, M>(o: Params<T, M>): T & M\n\nconst param = {\n  data: {\n    name: 'Hello',\n  },\n  computed: {\n    age() {\n      return 20\n    },\n  },\n}\n\ntest(param).name // string\ntest(param).age // number`, `89058308741110000000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Options</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt; = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  [</span><span class=\"mtk10\">P</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk4\">keyof</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">]: </span><span class=\"mtk10\">T</span><span class=\"mtk1\">[</span><span class=\"mtk10\">P</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Computed</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt; = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  [</span><span class=\"mtk10\">P</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk4\">keyof</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">]: () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">[</span><span class=\"mtk10\">P</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Params</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">, </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Options</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">computed</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Computed</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">declare</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">, </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">o</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Params</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">, </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt;): </span><span class=\"mtk10\">T</span><span class=\"mtk1\"> & </span><span class=\"mtk10\">M</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">param</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">name:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;Hello&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">computed:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">age</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">20</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk12\">param</span><span class=\"mtk1\">).</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// string</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk12\">param</span><span class=\"mtk1\">).</span><span class=\"mtk12\">age</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// number</span></span></code></pre>\n<p>最后可以使用 <strong>ThisType</strong> 映射类型, 可以轻松的实现在 computed age 方法下访问 data 中的数据:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"71957759338070670000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`type Options<T> = {\n  [P in keyof T]: T[P]\n}\ntype Computed<T> = {\n  [P in keyof T]: () => T[P]\n}\n\ninterface Params<T, M> {\n  data: Options<T>\n  computed: Computed<M>\n}\n\ndeclare function test<T, M>(o: Params<T, M> & ThisType<T & M>): T & M\n\ntest({\n  data: {\n    name: 'Hello'\n  },\n  computed: {\n    age() {\n      this.name    // string\n      return 20\n    }\n  }\n})`, `71957759338070670000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Options</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt; = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  [</span><span class=\"mtk10\">P</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk4\">keyof</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">]: </span><span class=\"mtk10\">T</span><span class=\"mtk1\">[</span><span class=\"mtk10\">P</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Computed</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt; = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  [</span><span class=\"mtk10\">P</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk4\">keyof</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">]: () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">[</span><span class=\"mtk10\">P</span><span class=\"mtk1\">]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Params</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">, </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Options</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">computed</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Computed</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">declare</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">, </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">o</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Params</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">, </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt; & </span><span class=\"mtk10\">ThisType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\"> & </span><span class=\"mtk10\">M</span><span class=\"mtk1\">&gt;): </span><span class=\"mtk10\">T</span><span class=\"mtk1\"> & </span><span class=\"mtk10\">M</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk11\">test</span><span class=\"mtk1\">({</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">name</span><span class=\"mtk1\">: </span><span class=\"mtk8\">&#39;Hello&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">computed</span><span class=\"mtk1\">: {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">age</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">    </span><span class=\"mtk3\">// string</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">return</span><span class=\"mtk1\"> 20</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">})</span></span></code></pre>\n<p>至此, 只有 data, computed 简单版的 Vue Type 已经实现。</p>\n<hr>\n<h3 id=\"infer\">infer</h3>\n<p>infer 表示在 extends 条件语句中待推断的类型变量。</p>\n<p>简单示例如下:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"30975306988815630000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`type ParamType<T> = T extends (param: infer P) => any ? P : T`, `30975306988815630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ParamType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt; = </span><span class=\"mtk10\">T</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">param</span><span class=\"mtk1\">: </span><span class=\"mtk4\">infer</span><span class=\"mtk1\"> </span><span class=\"mtk10\">P</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk10\">any</span><span class=\"mtk1\"> ? </span><span class=\"mtk10\">P</span><span class=\"mtk1\"> : </span><span class=\"mtk10\">T</span></span></code></pre>\n<p>在这个条件语句 <strong>T extends (param: infer P) => any ? P : T</strong> 中, infer P 表示待推断的函数参数。</p>\n<p>整句表示为: 如果 T 能赋值给 <strong>(param: infer P) => any</strong>, 则结果是 <strong>(param: infer P) => any</strong> 类型中的参数 P, 否则返回为 T。</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"29333028030314013000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`interface User {\n  name: string\n  age: number\n}\n\ntype Func = (user: User) => void\ntype Param = ParamType<Func> // Param = User\ntype AA = ParamType<string>  // string `, `29333028030314013000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">User</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">name</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">age</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Func</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">user</span><span class=\"mtk1\">: </span><span class=\"mtk10\">User</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Param</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">ParamType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Func</span><span class=\"mtk1\">&gt; </span><span class=\"mtk3\">// Param = User</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk10\">AA</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">ParamType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">string</span><span class=\"mtk1\">&gt;  </span><span class=\"mtk3\">// string </span></span></code></pre>\n<hr>\n<p><strong>摘抄自:</strong></p>\n<ul>\n<li><a href=\"https://jkchao.cn/article/5c8a4d99e53a054fad647c15\">https://jkchao.cn/article/5c8a4d99e53a054fad647c15</a></li>\n<li><a href=\"https://jkchao.cn/article/5bb9c63963a5d23d5ce3091b\">https://jkchao.cn/article/5bb9c63963a5d23d5ce3091b</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n</style>","frontmatter":{"title":"Typescript 技巧记录","date":"2021-04-08","type":"typescript"},"excerpt":"函数重载 ThisType 字面量类型 泛型 infer函数重载 当因函数参数不同而返回不同类型的场景时, 可以使用函数重载, 为同一个函数定义多个类型即可, 如下所示: 当我们需要遇到以下场景时可以利用函数重载来实现： 假设函数 test(p, f), 当 p…","fields":{"readingTime":{"text":"10 min read"}}},"allDirectory":{"totalCount":15,"edges":[{"node":{"base":"css"}},{"node":{"base":"frontend"}},{"node":{"base":"interview-css"}},{"node":{"base":"interview-javascript"}},{"node":{"base":"interview-浏览器"}},{"node":{"base":"interview-计算机基础"}},{"node":{"base":"javascript"}},{"node":{"base":"javascript1"}},{"node":{"base":"nodejs"}},{"node":{"base":"react"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"typescript"}},{"node":{"base":"vue"}},{"node":{"base":"小程序"}},{"node":{"base":"科普"}}]}},"pageContext":{"slug":"/typescript/ts_4/"}},"staticQueryHashes":["1487620982","3141419394","3649515864"]}