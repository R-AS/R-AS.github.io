{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/typescript/ts_1/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"table-of-contents\">Table of Contents</h3>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#-object-object-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\">{}, object, Object 有什么区别</a></li>\n<li><a href=\"#type-alias-%E4%B8%8E-interface-%E7%9A%84%E5%B7%AE%E5%BC%82\">type alias 与 interface 的差异</a></li>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B\">泛型</a></li>\n</ul>\n</div>\n<hr>\n<h3 id=\"-object-object-有什么区别\">{}, object, Object 有什么区别</h3>\n<p>这三种类型表示你的值是<strong>一个没有任何自定义属性</strong>的对象，只从 Object.prototype 继承了基本的方法:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Jelly'</span> <span class=\"token punctuation\">}</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// correct</span>\nuser<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// error: Property 'name' does not exist on type 'object'</span></code></pre></div>\n<p>分析以下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ntitle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// correct</span>\ntitle <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// correct</span>\ntitle <span class=\"token operator\">=</span> <span class=\"token number\">123</span> <span class=\"token comment\">// correct</span>\n\n<span class=\"token keyword\">let</span> content<span class=\"token operator\">:</span> object\ncontent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// correct</span>\ncontent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// correct</span>\ncontent <span class=\"token operator\">=</span> <span class=\"token number\">123</span> <span class=\"token comment\">// error: Type '123' is not assignable to type 'object'.</span></code></pre></div>\n<p><strong>如果一个变量的值是 object 类型，那么它可以是任何非原始类型值</strong></p>\n<p><strong>{}类型不仅包含非原始类型，还包含除 null | undefined 之外的其他原始类型</strong></p>\n<p>(Object 与 {} 基本一致)</p>\n<p>原始类型:</p>\n<ul>\n<li>string</li>\n<li>boolean</li>\n<li>number</li>\n<li>bigint</li>\n<li>symbol</li>\n<li>null</li>\n<li>undefined</li>\n</ul>\n<hr>\n<h3 id=\"type-alias-与-interface-的差异\">type alias 与 interface 的差异</h3>\n<ol>\n<li>同一个作用域中同名的 interface 会合并声明, 相反 type alias 则会报错</li>\n<li>type alias 的右值可以是任何类型, 包括原始类型和类型表达式</li>\n<li>interface 可以继承其他 shape 类型(非原始类型 object)</li>\n</ol>\n<hr>\n<h3 id=\"泛型\">泛型</h3>\n<p>观察以下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Arrayify <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">type</span> Arrayify<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>1 和 2 实际上泛型覆盖的作用域不同(<strong>简单的说,泛型定义的位置决定了他涵盖的作用域</strong>)\n例如下面的例子就一目了然了</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Arrayify <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  customProp<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> Arrayify<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  customProp<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Typrscript 记录","date":"2020-01-10","type":"typescript"},"excerpt":"Table of Contents {}, object, Object 有什么区别 type alias 与 interface 的差异 泛型{}, object, Object 有什么区别 这三种类型表示你的值是一个没有任何自定义属性的对象，只从 Object…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/typescript/ts_1/"}}}