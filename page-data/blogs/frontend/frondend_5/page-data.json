{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/frontend/frondend_5/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"table-of-contents\">Table of Contents</h3>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE\">配置</a></li>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8\">项目中的应用</a></li>\n</ul>\n</div>\n<hr>\n<p>工作之余对项目进行思考，每次新增组件都前后台都需要复用许多代码。除了公共组件的提取，有没有什么办法能提高工作效率呢？\n因此想到如果代码能够直接生成，那每次生成组件模板，就更方便了。</p>\n<p>于是找到了 <strong><a href=\"https://github.com/plopjs/plop\">plop</a></strong>，plop 是一个能够依据配置生成代码的库，具体详情可查阅文档。</p>\n<h3 id=\"安装\">安装</h3>\n<p><strong>1. 将 plop 添加到项目中</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"text\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">npm install --save-dev plop</span></code></pre>\n<p><strong>2. 全局安装 plop</strong> </p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"text\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">npm install -g plop</span></code></pre>\n<hr>\n<h3 id=\"配置\">配置</h3>\n<ol>\n<li>\n<p>在根目录中创建 plopfile.js</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">module</span><span class=\"mtk1\">.</span><span class=\"mtk10\">exports</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">plop</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk3\">// create your generators here</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">plop</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setGenerator</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;basics&#39;</span><span class=\"mtk1\">, {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">description:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;this is a skeleton plopfile&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">prompts:</span><span class=\"mtk1\"> [], </span><span class=\"mtk3\">// array of inquirer prompts</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">actions:</span><span class=\"mtk1\"> []  </span><span class=\"mtk3\">// array of actions</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">});</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">};</span></span></code></pre>\n</li>\n</ol>\n<p>以上代码创建一个生成器，<strong>description</strong> 表示生成器的描述，<strong>prompts</strong> 设置一些变量提示，<strong>actions</strong> 是对代码的操作(生成、编辑等)</p>\n<p>具体咋操作可查看文档</p>\n<hr>\n<h3 id=\"项目中的应用\">项目中的应用</h3>\n<p><strong>1. 代码结构</strong></p>\n<p>因为项目组件采用 duck 的结构，目录大致如下:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"text\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">videoComponent</span>\n<span class=\"grvsc-line\">|_ videoComponent</span>\n<span class=\"grvsc-line\">|_ videoContainer</span></code></pre>\n<p>因此可以抽出一个模板：</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"text\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">src</span>\n<span class=\"grvsc-line\">|_ templates</span>\n<span class=\"grvsc-line\">   |_ component</span>\n<span class=\"grvsc-line\">   |  |_ compTemplate.jsx</span>\n<span class=\"grvsc-line\">   |  |_ containerTemplate.jsx</span>\n<span class=\"grvsc-line\">   |_ plop.js</span></code></pre>\n<p><strong>plop.js 具体配置如下:</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk10\">module</span><span class=\"mtk1\">.</span><span class=\"mtk10\">exports</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">description:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;create component&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">prompts:</span><span class=\"mtk1\"> [{</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">type:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;component&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">name:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;name&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">message:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;请输入组件主名称，如 video(会自动生成 videoComponent 等)&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }],</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">actions:</span><span class=\"mtk1\"> [</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">type:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;addMany&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">destination:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;src/components/{{name}}Component&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">paths:</span><span class=\"mtk1\"> [</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&#39;src/templates/comp/{{name}}Component.js&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&#39;src/templates/comp/{{name}}Container.js&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      ],</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">base:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;src/templates/comp&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk11\">transform</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">content</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">content</span><span class=\"mtk1\">.</span><span class=\"mtk11\">replace</span><span class=\"mtk1\">(</span><span class=\"mtk5\">/testContainer</span><span class=\"mtk11\">|</span><span class=\"mtk5\">testComponent/</span><span class=\"mtk4\">g</span><span class=\"mtk1\">, </span><span class=\"mtk12\">str</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">          </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">str</span><span class=\"mtk1\"> === </span><span class=\"mtk8\">&#39;testContainer&#39;</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk8\">`</span><span class=\"mtk4\">${</span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk4\">}</span><span class=\"mtk8\">Container`</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">          } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">str</span><span class=\"mtk1\"> === </span><span class=\"mtk8\">&#39;testComponent&#39;</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk8\">`</span><span class=\"mtk4\">${</span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk4\">}</span><span class=\"mtk8\">Component`</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">          }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        })</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">templateFiles:</span><span class=\"mtk1\"> [</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&#39;src/templates/comp/compTemplate.js&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&#39;src/templates/comp/containerTemplate.js&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      ],</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  ]</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><strong>plopfile.js 配置如下</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">common</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;./src/templates/plop.js&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk10\">module</span><span class=\"mtk1\">.</span><span class=\"mtk10\">exports</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">plop</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">plop</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setGenerator</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;common&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">common</span><span class=\"mtk1\">)</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><strong>2. 修改源码</strong></p>\n<p>因为这里想要的是生成一个文件夹，并且把代码中的函数名以及文件名改成我们需要的样子。所以使用了 <strong>addMany</strong> 这个 action。但是 addMany 有一个缺陷，他没有属性可以把我们的文件名修改成需要的样子，所以查阅了源码，修改了以下地方。</p>\n<p><strong>node-plop/lib/actions/addMany.js</strong></p>\n<p><img src=\"/blogs/frontend/frontend_5_pic_1.png#pic_center\" alt=\"pic_1\">\n<img src=\"/blogs/frontend/frontend_5_pic_2.png#pic_center\" alt=\"pic_2\"></p>\n<p>可以看到这里的文件名其实是让配置里的 templateFile 截取掉和 base 的公共部分，因此得到文件名。</p>\n<p>也就是说：</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"text\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">templateFile: &#39;src/templates/comp/compTemplate.js&#39;</span>\n<span class=\"grvsc-line\">base: &#39;src/templates/comp&#39;</span>\n<span class=\"grvsc-line\">filename: compTemplate.js</span></code></pre>\n<p>因此每次所生成的文件名都和模板的一样。所以我们可以自己设置一个 paths 属性, path 文件名为变量。这样我们得到的文件名就是想要的样子了。(第一张图的注释去掉即可生效)</p>\n<p><strong>3. 看下效果</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"text\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\">npm run plop</span></code></pre>\n<p>输入我们的组件名称</p>\n<p><img src=\"/blogs/frontend/frontend_5_pic_3.png#pic_center\" alt=\"pic_3\"></p>\n<p>可以看到文件夹、文件名、代码中的组件名都变成我们想要的 videoComponent 了！</p>\n<p><img src=\"/blogs/frontend/frontend_5_pic_4.png#pic_center\" alt=\"pic_4\"></p>\n<hr>\n<p><strong>参考自 <a href=\"https://github.com/plopjs/plop\">https://github.com/plopjs/plop</a></strong> </p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk5 { color: #D16969; }\n</style>","frontmatter":{"title":"代码生成器 —— plop","date":"2020-10-24","type":"frontend"},"excerpt":"Table of Contents 安装 配置 项目中的应用 工作之余对项目进行思考，每次新增组件都前后台都需要复用许多代码。除了公共组件的提取，有没有什么办法能提高工作效率呢？\n因此想到如果代码能够直接生成，那每次生成组件模板，就更方便了。 于是找到了 plop，plop…","fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/frontend/frondend_5/"}}}