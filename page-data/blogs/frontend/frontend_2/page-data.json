{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blogs/frontend/frontend_2/","result":{"data":{"markdownRemark":{"fileAbsolutePath":"/Users/zhengjinyang/Documents/study/R-AS.github.io/src/pages/blogs/frontend/frontend_2.md","html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87\">前期准备</a></li>\n<li><a href=\"#%E5%BB%BA%E7%AB%8B%E5%9F%BA%E5%87%86\">建立基准</a></li>\n<li><a href=\"#%E5%A4%84%E7%90%86%E6%8A%A5%E5%91%8A%E9%94%99%E8%AF%AF\">处理报告错误</a></li>\n</ul>\n</div>\n<hr>\n<h3 id=\"前期准备\">前期准备</h3>\n<p><strong>1. 审查网站</strong>\n每当我们想优化一个网站,提高站点的负载性能是, Audit 有以下两个重要功能:</p>\n<ol>\n<li>Audit 创建了一个基准,以衡量后续的更改</li>\n<li>Audit 提供了可行的提示,说明那些更改将产生最大的影响</li>\n</ol>\n<p><strong>2. 准备一个现成的网站, 这里以这个<a href=\"https://glitch.com/edit/#!/tony\">项目</a>为例</strong></p>\n<ol>\n<li>打开这个项目</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_1.png#pic_center\" alt=\"pic_1\"></p>\n<ol start=\"2\">\n<li>点击 tony, Remix Project. 它会拷贝这个项目, 随机生成一个项目名, 我们可以在上面直接进行更改</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_2.png#pic_center\" alt=\"pic_2\">\n<img src=\"/blogs/frontend/frontend_2_pic_3.png#pic_center\" alt=\"pic_3\"></p>\n<ol start=\"3\">\n<li>点击 Show, 预览网站</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_4.png#pic_center\" alt=\"pic_4\"></p>\n<hr>\n<h3 id=\"建立基准\">建立基准</h3>\n<p><strong>基准记录是在进行任何性能改进之前,网站的运行情况</strong>\\</p>\n<ol>\n<li>在 DevTools 点击 Audits 选项</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_5.png#pic_center\" alt=\"pic_5\"></p>\n<ol start=\"2\">\n<li>\n<p>关于面板中的配置:</p>\n<ul>\n<li><strong>Device</strong></li>\n</ul>\n<p>可以设置所需分析的设备类型</p>\n<ul>\n<li><strong>Audits</strong></li>\n</ul>\n<p>这里可以审查以下几个选项的类型,如果不想审查可以将其禁用.禁用类别会稍微加快审核过程</p>\n<ul>\n<li><strong>Throttling</strong></li>\n</ul>\n<p>这里设置为 Simulated Fast 3G, 4x CPU Slowdown 来模拟移动设备的浏览状态.这里之所以是 Simulated 是因为 Audit 在审核过程中实际上并未节流, 相反, 它只是推断在移动条件下页面加载所需的时间</p>\n<ul>\n<li><strong>Clear Storage</strong></li>\n</ul>\n<p>如果要审查首次访问的体验, 请保留此项.若需要审查重复访问体验, 请禁用次项</p>\n</li>\n<li>点击 Run Audits, 大概 10 - 30 秒后,面板上会显示这个网站的性能报告</li>\n</ol>\n<hr>\n<h3 id=\"处理报告错误\">处理报告错误</h3>\n<p><strong>如果得到的报告面板显示 Error, 请尝试在无痕模式下运行该网站, 这样可以确保在干净环境下运行, 特别是 Chrome 扩展程序经常会干扰审查过程</strong></p>\n<ol>\n<li><strong>理解报告</strong></li>\n</ol>\n<p>右上角的分数代表着网站总体性能的分数, 在之后我们进行优化后, 你将会看到分数会提高. 分数越高代表着网站性能越好</p>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_6.png#pic_center\" alt=\"pic_6\"></p>\n<ul>\n<li><strong>Metrics 指标</strong> 中提供了站点性能的定量度量.每个指标都可以洞悉性能的不同方面. 例如 Firtst Contentful Paint 会告诉你, 页面什么时候第一次将内容绘制到屏幕上. Time To Interactive 标志这页面加载完以处理用户交互的时间点</li>\n</ul>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_7.png#pic_center\" alt=\"pic_7\"></p>\n<p>  Metrics 下方是屏幕截图的集合, 这些截图显示了页面加载时的外观.</p>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_8.png#pic_center\" alt=\"pic_8\"></p>\n<ul>\n<li><strong>Opportunities</strong> 提供了有关改善页面加载性能的特定指示</li>\n</ul>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_9.png#pic_center\" alt=\"pic_9\"></p>\n<ul>\n<li><strong>Diagnostics 诊断程序</strong> 提供了有关影响页面加载时间的因素的更多信息</li>\n</ul>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_10.png#pic_center\" alt=\"pic_10\"></p>\n<ul>\n<li><strong>Passed Audits</strong> 显示了该站点通过审核的部分</li>\n</ul>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_11.png#pic_center\" alt=\"pic_11\"></p>\n<ol start=\"2\">\n<li><strong>实践</strong></li>\n</ol>\n<p><strong>Enable text compression</strong></p>\n<p>在报告中显示了 enable text compression 是提高页面性能的方式之一. 文本压缩是指在网络发送文本之前减小或压缩文本文件的大小\n以下有两种方法可以手动检查文本资源是否已压缩:</p>\n<ul>\n<li>\n<p>打开 Network, 查看 Enable text compression 提示的文件</p>\n<p>可以看到在 size 这一列中有两个值, 上面的值代表着下载资源的大小, 下面的值代表着未压缩文件的大小, 如果这两个值相同, 则说明在发起网络请求前并未对其进行压缩.</p>\n<p>我们也可以通过查看 HTTP Header 来检查文件压缩情况:</p>\n<ol>\n<li>点击 bundle.js</li>\n<li>点击 Headers 标签</li>\n</ol>\n<p><img src=\"/blogs/frontend/frontend_2_pic_12.png#pic_center\" alt=\"pic_12\"></p>\n<p>查看 Response Headers 这一项的 content-encoding. 如果没有看到, 代表着 bundle.js 并未压缩. 如果文本被压缩过, 此部分通常设置为 gzip/deflate/br.</p>\n<p>接下来调开代码, 点击 server.js</p>\n<p><img src=\"/blogs/frontend/frontend_2_pic_13.png#pic_center\" alt=\"pic_13\"></p>\n<p>在 app.use(express.static('build')) 前面增加 app.use(compression())</p>\n</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"94598037675400940000\"\n              data-toaster-class=\"gatsby-code-button-toaster copyToaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text copyToasterText\"\n              data-toaster-text=\"copy successfully!\"\n              data-toaster-duration=\"5000\"\n              onClick=\"copyToClipboard(`  const fs = require('fs');\n  const compression = require('compression');\n  app.use(compression());\n  app.use(express.static('build'));`, `94598037675400940000`)\"\n            >\n              <div\n                class=\"gatsby-code-button copyButton\"\n                data-tooltip=\"\"\n              >\n                copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fs</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;fs&#39;</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">compression</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;compression&#39;</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">app</span><span class=\"mtk1\">.</span><span class=\"mtk11\">use</span><span class=\"mtk1\">(</span><span class=\"mtk11\">compression</span><span class=\"mtk1\">());</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">app</span><span class=\"mtk1\">.</span><span class=\"mtk11\">use</span><span class=\"mtk1\">(</span><span class=\"mtk12\">express</span><span class=\"mtk1\">.</span><span class=\"mtk11\">static</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;build&#39;</span><span class=\"mtk1\">));</span></span></code></pre>\n<p>  对 文本进行压缩之后, 在 Network 查看 bundle.js, 发现网络发送只有 150KB, 为文本原本大小是 1.2MB</p>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_14.png#pic_center\" alt=\"pic_14\"></p>\n<p>  查看 Response Headers 发现多了 content-encodeing: gzip, 也就是文本已经被压缩</p>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_15.png#pic_center\" alt=\"pic_15\"></p>\n<p>  再次审核页面, 衡量文本压缩对页面的负载性能有什么影响:</p>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_16.png#pic_center\" alt=\"pic_16\"></p>\n<p>  可以看到网站的总体评分上升了!</p>\n<p><strong>Properly size images</strong></p>\n<p>  在审核报告中有 Properly size images 这一项, 调整图片大小可以减少页面加载时间.</p>\n<ul>\n<li>\n<p>展开 Properly size images 查看有哪些图片需要进行调整</p>\n<ol>\n<li></li>\n</ol>\n</li>\n</ul>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_17.png#pic_center\" alt=\"pic_17\"></p>\n<ol start=\"2\">\n<li>打开代码, 到 src/model.js</li>\n<li>将 const dir = 'big' 替换为 const dir = 'small', 此目录包含已调整大小的相同图像副本.</li>\n<li>再次审核页面性能</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_18.png#pic_center\" alt=\"pic_18\"></p>\n<p>  可以看到性能总分提高了一点</p>\n<p>  在实际情况中,对于小型项目来说这已经足够了,对于大型项目可以通过以下几点进行图像优化:</p>\n<ul>\n<li>在构建过程中调整图片大小</li>\n<li>在构建过程中为每个图像创建多个大小, 然后在代码中使用 srcset. 在运行时, 浏览器会选择最适合其运行设备的大小</li>\n<li>使用图像 CDN, 该 CDN 可让你在请求图像时动态调整其大小</li>\n</ul>\n<p><strong>Eliminate render-blocking resources</strong></p>\n<p>  截止到目前, 性能报告中显示当前的首要任务是阻止渲染资源. 渲染资源指的是外部 JavaScript 或 CSS 文件, 浏览器在显示页面之前必选下载, 解析和执行该文件.目标是运行仅显示页面所需的核心 CSS 和 JavaScript 代码</p>\n<p>  首先, 我们需要找到不需要在页面执行的代码</p>\n<ol>\n<li>展开 Eliminate render-blocking resources 查看正在阻止的资源: lodash.js 和 jquery.js</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_19.png#pic_center\" alt=\"pic_19\"></p>\n<ol start=\"2\">\n<li>Command+Shift+P (Mac) 或 Control+Shift+P (Windows, Linux, Chrome OS) 打开命菜单, 输入并选择 Show Coverage</li>\n<li>点击 Reload. Coverage 概述了页面加载时正在执行的代码的情况.如图中指出lodash.js 和 jquery.js 分别有 30.3% 和 75.9% 的代码没有执行</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_20.png#pic_center\" alt=\"pic_20\"></p>\n<ol start=\"4\">\n<li>点击 jquery.js, 会显示 jquery.js 的代码, 代码旁边的绿条表示代码已执行, 红色条表示代码未执行且绝对不需要在页面加载时使用</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_21.png#pic_center\" alt=\"pic_21\"></p>\n<p>  加载页面是否需要 jquery.js 和 lodash.js 呢? Request Blocking 可以显示资源不可用时会发生什么</p>\n<ol>\n<li>打开 Network</li>\n<li>Command+Shift+P (Mac) 或者 Control+Shift+P (Windows, Linux, Chrome OS) 打开命令菜单</li>\n<li>输入并打开 Show Request Blocking</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_22.png#pic_center\" alt=\"pic_22\"></p>\n<ol start=\"4\">\n<li>点击 +, 输入 /libs/*, 回车</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_23.png#pic_center\" alt=\"pic_23\"></p>\n<ol start=\"5\">\n<li>刷新页面, 可以看到在 Network 面板下 jQuery.js 和 lodash.js 是红色的, 代表着它们已经被阻止了. 而该页面仍处于加载状态并且是交互式的, 因此看起来好像不需要这些资源</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_24.png#pic_center\" alt=\"pic_24\"></p>\n<ol start=\"6\">\n<li>点击#:no<em>entry</em>sign删除 阻止 /libs/* 资源</li>\n</ol>\n<p>  那么现在从代码中删除对这些文件的引用, 然后再次审核页面:</p>\n<ol>\n<li>进入代码编辑器, 打开 template.html</li>\n<li>删除 <code>&#x3C;script src=\"/libs/lodash.js\"></code> 和 <code>&#x3C;script src=\"/libs/jquery.js\">&#x3C;/script></code></li>\n<li>再次审核, 可以看到性能总分有所提高</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_25.png#pic_center\" alt=\"pic_25\"></p>\n<p><strong>Do less main thread work</strong></p>\n<p>  在最后的性能报告中显示, 我们可以缩小 JavaScript, 但是在 Diagnostics 中可看到当前最大的问题似乎是主线程活动过多.\n主线程是浏览器完成显示页面所需的大部分工作的地方, 例如解析和执行 HTML, CSS 和 JavaScript\n那么当前的任务就是使用 Performance 面板来分析页面加载时主线程正在执行的工作, 并找到推迟或删除不必要工作的方法</p>\n<ol>\n<li>打开 Performance 面板</li>\n<li>点击 Capture Settings ✲</li>\n<li>设置 Network: Slow 3G, CPU: 6x slowdown (与笔记本电脑或台式机相比, 移动设备通常具有更多的硬件限制, 因此这些设置可以模拟在配置较低的设备时的页面加载体验)</li>\n<li>点击 Reload</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_26.png#pic_center\" alt=\"pic_26\"></p>\n<p>  通过图中的各个模块可以看出每秒的帧数, CPU 和 NET 的情况, 而轨道中黄色部分代表着 CPU 完全忙碌于 JavaScript 执行, 这表明我们可以减少 JavaScript 来加快页面加载速度</p>\n<p>  我们可以调查跟踪以找到减少 JavaScript 工作量的方法:</p>\n<ol>\n<li>展开 Timing, 可以看到 Timing 中 React 占据了许多, 似乎应用程序正在使用 React 的开发模式, 切换到 React 的生成模式可能会提高性能</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_27.png#pic_center\" alt=\"pic_27\"></p>\n<ol start=\"2\">\n<li>展开 Main 面板, 该面板从左到右显示了主线程活动的时间顺序日志. y 轴显示事件发生的原因, 上面的事件执行导致下面事件的发生</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_28.png#pic_center\" alt=\"pic_28\"></p>\n<ol start=\"4\">\n<li>滚动到 Main 面板下面, 应用程序引起的活动通常在底部. 在此应用程序中, 似乎一个名为 App 的函数引起了对 mineBitcoin 函数的大量调用</li>\n<li>在 Bottom-up 面板中, 展示了哪些活动占用最多的时间.</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_29.png#pic_center\" alt=\"pic_29\"></p>\n<p>  在 Self Time 这一列中显示了每个活动花费了多少时间, 可以看到主线程大约花费了 78.4% 的时间花费在 mineBitcoin 函数上</p>\n<p>  那么现在看看使用生产模式并减少 JavaScript 活动是否会加快页面加载速度, 首先开启生产模式:</p>\n<ol>\n<li>打开代码编辑器, 打开 webpack.config.js</li>\n<li>将 \"mode\": \"development\" 改为 \"mode\": \"production\" </li>\n<li>再次审核页面</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_30.png#pic_center\" alt=\"pic_30\"></p>\n<p>  接下来通过删除对 mineBitcoin 的调用来减少 JavaScript 活动:</p>\n<ol>\n<li>打开代码编辑器, 打开 src/App.jsx</li>\n<li>在 constructor 注释 this.minBitcoin(1500)</li>\n<li>再次审核页面</li>\n</ol>\n<p>  <img src=\"/blogs/frontend/frontend_2_pic_31.png#pic_center\" alt=\"pic_31\"></p>\n<p>  可以看到性能总分大大提升了!</p>\n<hr>\n<p><strong>转载自</strong>\n<a href=\"https://developers.google.com/web/tools/chrome-devtools/speed/get-started\">https://developers.google.com/web/tools/chrome-devtools/speed/get-started</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n</style>","frontmatter":{"title":"前端性能审查 —— Audits","date":"2020-04-18","type":"frontend"},"excerpt":"前期准备 建立基准 处理报告错误前期准备 1. 审查网站\n每当我们想优化一个网站,提高站点的负载性能是, Audit 有以下两个重要功能: Audit 创建了一个基准,以衡量后续的更改 Audit 提供了可行的提示,说明那些更改将产生最大的影响…","fields":{"readingTime":{"text":"12 min read"}}},"allDirectory":{"totalCount":14,"edges":[{"node":{"base":"css"}},{"node":{"base":"interview-css"}},{"node":{"base":"frontend"}},{"node":{"base":"interview-javascript"}},{"node":{"base":"interview-浏览器"}},{"node":{"base":"interview-计算机基础"}},{"node":{"base":"javascript"}},{"node":{"base":"nodejs"}},{"node":{"base":"react"}},{"node":{"base":"redux-tool-kit"}},{"node":{"base":"vue"}},{"node":{"base":"typescript"}},{"node":{"base":"小程序"}},{"node":{"base":"科普"}}]}},"pageContext":{"slug":"/frontend/frontend_2/"}},"staticQueryHashes":["1487620982","3141419394","3649515864"]}